{"version":3,"file":"DlJpEC_N.js","sources":["../../../../../../../stores/loadingStore.ts","../../../../../../../components/LoadingOverlay.vue","../../../../../../../stores/systemStore.ts"],"sourcesContent":["import { defineStore } from \"pinia\";\n\ninterface LoadingState {\n  isLoading: boolean;\n  message: string;\n  progress: number;\n}\n\nexport const useLoadingStore = defineStore(\"loading\", {\n  state: (): LoadingState => ({\n    isLoading: false,\n    message: \"Initializing...\",\n    progress: 0,\n  }),\n\n  actions: {\n    startLoading(message: string = \"Loading...\") {\n      this.isLoading = true;\n      this.message = message;\n      this.progress = 0;\n    },\n\n    updateProgress(progress: number, message?: string) {\n      this.progress = Math.max(0, Math.min(100, progress));\n      if (message) {\n        this.message = message;\n      }\n    },\n\n    updateMessage(message: string) {\n      this.message = message;\n    },\n\n    stopLoading() {\n      this.isLoading = false;\n      this.message = \"Initializing...\";\n      this.progress = 0;\n    },\n\n    async withLoading<T>(\n      callback: (updateProgress: (progress: number, message?: string) => void) => Promise<T>,\n      initialMessage: string = \"Loading...\"\n    ): Promise<T> {\n      this.startLoading(initialMessage);\n      try {\n        const result = await callback((progress, message) => {\n          this.updateProgress(progress, message);\n        });\n        return result;\n      } finally {\n        this.stopLoading();\n      }\n    },\n  },\n});","<template>\n  <div v-if=\"loadingStore.isLoading\" class=\"loading-overlay\">\n    <div class=\"loading-content\">\n      <h2>{{ title }}</h2>\n      <div class=\"loading-message\">{{ loadingStore.message }}</div>\n      <div class=\"progress-container\">\n        <div class=\"progress-bar\">\n          <div class=\"progress-fill\" :style=\"{ width: loadingStore.progress + '%' }\"></div>\n        </div>\n        <div class=\"progress-text\">{{ loadingStore.progress }}%</div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { useLoadingStore } from \"~/stores/loadingStore\";\n\ninterface Props {\n  title?: string;\n}\n\nwithDefaults(defineProps<Props>(), {\n  title: \"Loading\",\n});\n\nconst loadingStore = useLoadingStore();\n</script>\n\n<style scoped>\n.loading-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(255, 255, 255, 0.95);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n}\n\n.loading-content {\n  text-align: center;\n  max-width: 400px;\n  width: 100%;\n  padding: 2rem;\n}\n\n.loading-content h2 {\n  margin-bottom: 1rem;\n  color: #333;\n}\n\n.loading-message {\n  color: #666;\n  margin-bottom: 2rem;\n  min-height: 1.5rem;\n}\n\n.progress-container {\n  position: relative;\n}\n\n.progress-bar {\n  height: 24px;\n  background: #f0f0f0;\n  border-radius: 12px;\n  overflow: hidden;\n  box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.progress-fill {\n  height: 100%;\n  background: linear-gradient(90deg, #4caf50, #45a049);\n  transition: width 0.3s ease;\n  box-shadow: 0 2px 4px rgba(76, 175, 80, 0.3);\n}\n\n.progress-text {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  font-weight: 600;\n  color: #333;\n  font-size: 0.875rem;\n}\n</style>","import { defineStore } from \"pinia\";\nimport { getRepoZip } from \"~/assets/shared/battlescribe/github\";\nimport { convertToJson, isAllowedExtension } from \"~/assets/shared/battlescribe/bs_convert\";\nimport { GameSystemFiles } from \"~/assets/shared/battlescribe/local_game_system\";\nimport type { BSIDataSystem, BSIDataCatalogue } from \"~/assets/shared/battlescribe/bs_types\";\n\ninterface SystemState {\n  currentSystem: GameSystemFiles | null;\n  systemName: string;\n  isLoaded: boolean;\n}\n\nexport const useSystemStore = defineStore(\"system\", {\n  state: (): SystemState => ({\n    currentSystem: null,\n    systemName: \"\",\n    isLoaded: false,\n  }),\n\n  getters: {\n    gameSystem: (state) => state.currentSystem?.gameSystem,\n    hasSystem: (state) => state.isLoaded && state.currentSystem?.gameSystem,\n  },\n\n  actions: {\n    async loadSystem(\n      systemId: string, \n      updateProgress?: (progress: number, message?: string) => void\n    ): Promise<void> {\n      const progress = updateProgress || (() => {});\n      \n      try {\n        // Check if it's a GitHub repo (contains /)\n        if (systemId.includes(\"/\")) {\n          await this.loadGitHubSystem(systemId, progress);\n        } else {\n          await this.loadLocalSystem(systemId, progress);\n        }\n\n        // Store in global for backward compatibility\n        globalThis.system = this.currentSystem;\n        this.isLoaded = true;\n        \n      } catch (error) {\n        console.error(\"Failed to load system:\", error);\n        this.currentSystem = null;\n        this.systemName = \"\";\n        this.isLoaded = false;\n        throw error;\n      }\n    },\n\n    async loadGitHubSystem(\n      systemId: string,\n      updateProgress: (progress: number, message?: string) => void\n    ): Promise<void> {\n      const [owner, repo] = systemId.split(\"/\");\n\n      updateProgress(10, `Connecting to GitHub repository ${owner}/${repo}...`);\n\n      const gameSystem = new GameSystemFiles();\n\n      updateProgress(20, \"Downloading repository files...\");\n      const zipEntries = await getRepoZip(owner, repo);\n\n      updateProgress(40, \"Processing game system files...\");\n\n      // Process files\n      const totalFiles = zipEntries.length;\n      let processedFiles = 0;\n\n      for (const [path, entry] of zipEntries) {\n        if (entry.isDirectory || !isAllowedExtension(path)) {\n          processedFiles++;\n          continue;\n        }\n\n        const content = await entry.text();\n        const data = await convertToJson(content, path);\n\n        if (data.gameSystem) {\n          await gameSystem.setSystem(data as BSIDataSystem);\n          this.systemName = data.gameSystem.name;\n          updateProgress(\n            40 + Math.floor((processedFiles / totalFiles) * 50),\n            `Loading ${data.gameSystem.name}...`\n          );\n        } else if (data.catalogue) {\n          await gameSystem.setCatalogue(data as BSIDataCatalogue);\n        }\n\n        processedFiles++;\n        // Update progress between 40-90%\n        updateProgress(40 + Math.floor((processedFiles / totalFiles) * 50));\n      }\n\n      updateProgress(95, \"Finalizing...\");\n      this.currentSystem = gameSystem;\n    },\n\n    async loadLocalSystem(\n      systemId: string,\n      updateProgress: (progress: number, message?: string) => void\n    ): Promise<void> {\n      updateProgress(20, \"Loading local system...\");\n\n      const localSystems = JSON.parse(\n        localStorage.getItem(\"nr-translation-local-systems\") || \"[]\"\n      );\n      const localSystem = localSystems.find((s: any) => s.id === systemId);\n\n      if (!localSystem) {\n        throw new Error(\"System not found\");\n      }\n\n      const gameSystem = new GameSystemFiles();\n\n      updateProgress(50, `Loading ${localSystem.name}...`);\n\n      if (localSystem.data.gameSystem) {\n        await gameSystem.setSystem(localSystem.data.gameSystem);\n        this.systemName = localSystem.name;\n      }\n\n      updateProgress(70, \"Loading catalogues...\");\n\n      if (localSystem.data.catalogues) {\n        const totalCatalogues = localSystem.data.catalogues.length;\n        for (let i = 0; i < totalCatalogues; i++) {\n          await gameSystem.setCatalogue(localSystem.data.catalogues[i]);\n          updateProgress(70 + Math.floor((i / totalCatalogues) * 20));\n        }\n      }\n\n      updateProgress(95, \"Finalizing...\");\n      this.currentSystem = gameSystem;\n    },\n\n    async ensureSystemLoaded(\n      systemId: string,\n      updateProgress?: (progress: number, message?: string) => void\n    ): Promise<void> {\n      // If system is already loaded and matches the requested system, do nothing\n      if (this.isLoaded && this.currentSystem?.gameSystem) {\n        return;\n      }\n\n      // Load the system\n      await this.loadSystem(systemId, updateProgress);\n    },\n\n    clearSystem(): void {\n      this.currentSystem = null;\n      this.systemName = \"\";\n      this.isLoaded = false;\n      globalThis.system = null;\n    },\n  },\n});"],"names":["useLoadingStore","defineStore","message","progress","callback","initialMessage","loadingStore","_unref","_openBlock","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","title","_hoisted_3","_toDisplayString","_hoisted_4","_hoisted_5","_normalizeStyle","_hoisted_6","useSystemStore","state","systemId","updateProgress","error","owner","repo","gameSystem","GameSystemFiles","zipEntries","getRepoZip","totalFiles","processedFiles","path","entry","isAllowedExtension","content","data","convertToJson","localSystem","s","totalCatalogues","i"],"mappings":"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"}