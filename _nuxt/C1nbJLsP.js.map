{"version":3,"mappings":"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","names":["BSDataTranslationSource","systemId","languageCode","progressCallback","extractStrings","__vitePreload","rawStrings","catalogueList","allTranslations","catalogueName","stringSet","strings","str","index","translationString","progress","error","getRepoZip","convertToJson","isAllowedExtension","GameSystemFiles","owner","repo","gameSystem","zipEntries","totalFiles","processedFiles","path","entry","content","data","localSystemsJson","localSystem","catalogue","NewRecruitTranslationSource","newRecruitStrings","T9ATranslationSource","JSONTranslationSource","jsonData","sourceId","createTranslationSourceForSystem","getSystemName"],"ignoreList":[],"sources":["../../../../../../../stores/translationSources/BSDataTranslationSource.ts","../../../../../../../stores/translationSources/NewRecruitTranslationSource.ts","../../../../../../../stores/translationSources/T9ATranslationSource.ts","../../../../../../../stores/translationSources/JSONTranslationSource.ts","../../../../../../../stores/translationSources/index.ts"],"sourcesContent":["import type { TranslationString, TranslationCatalogue } from \"../translationStore\";\nimport type { TranslationSource } from \"./index\";\n\n// BSData translation source implementation\nexport class BSDataTranslationSource implements TranslationSource {\n  private system: any;\n\n  constructor(private systemId: string) { }\n\n  getId(): string {\n    return `bs-${this.systemId}`;\n  }\n\n  getName(): string {\n    return `${this.systemId}`;\n  }\n\n  async getTranslations(languageCode: string, progressCallback?: (progress: number, message?: string) => void): Promise<{\n    strings: Record<string, Set<string>>;\n    catalogues: TranslationCatalogue[];\n    translations: TranslationString[];\n  }> {\n    // Load system if not already loaded\n    if (!this.system) {\n      await this.loadSystem(progressCallback);\n    }\n\n    // Import and use bs_translate\n    const { extractStrings } = await import(\"~/assets/ts/bs_translate\");\n\n    // Extract translations from the system\n    const rawStrings = extractStrings(this.system, progressCallback || (() => { }));\n\n    // Process translations into catalogues\n    const catalogueList: TranslationCatalogue[] = [];\n    const allTranslations: TranslationString[] = [];\n\n    Object.entries(rawStrings).forEach(([catalogueName, stringSet]) => {\n      const strings: TranslationString[] = [];\n\n      Array.from(stringSet).forEach((str, index) => {\n        const translationString: TranslationString = {\n          id: `${catalogueName}-${index}`,\n          key: str,\n          original: str,\n          translation: \"\",\n          translated: false,\n          catalogue: catalogueName,\n        };\n\n        strings.push(translationString);\n        allTranslations.push(translationString);\n      });\n\n      catalogueList.push({\n        id: catalogueName,\n        name: catalogueName,\n        stringCount: stringSet.size,\n        strings: strings,\n      });\n    });\n\n    return {\n      strings: rawStrings,\n      catalogues: catalogueList,\n      translations: allTranslations\n    };\n  }\n\n  private async loadSystem(progressCallback?: (progress: number, message?: string) => void): Promise<void> {\n    const progress = progressCallback || (() => { });\n\n    try {\n      // Check if it's a GitHub repo (contains /)\n      if (this.systemId.includes(\"/\")) {\n        await this.loadGitHubSystem(progress);\n      } else {\n        await this.loadLocalSystem(progress);\n      }\n    } catch (error) {\n      console.error(\"Failed to load system:\", error);\n      throw error;\n    }\n  }\n\n  private async loadGitHubSystem(progress: (progress: number, message?: string) => void): Promise<void> {\n    const { getRepoZip } = await import(\"~/assets/shared/battlescribe/github\");\n    const { convertToJson, isAllowedExtension } = await import(\"~/assets/shared/battlescribe/bs_convert\");\n    const { GameSystemFiles } = await import(\"~/assets/shared/battlescribe/local_game_system\");\n\n    const [owner, repo] = this.systemId.split(\"/\");\n\n    progress(10, `Connecting to GitHub repository ${owner}/${repo}...`);\n\n    const gameSystem = new GameSystemFiles();\n\n    progress(20, \"Downloading repository files...\");\n    const zipEntries = await getRepoZip(owner, repo);\n\n    progress(40, \"Processing game system files...\");\n\n    // Process files\n    const totalFiles = zipEntries.length;\n    let processedFiles = 0;\n\n    for (const [path, entry] of zipEntries) {\n      if (entry.isDirectory || !isAllowedExtension(path)) {\n        processedFiles++;\n        continue;\n      }\n\n      const content = await entry.text();\n      const data = await convertToJson(content, path);\n\n      if (data.gameSystem) {\n        await gameSystem.setSystem(data);\n        progress(\n          40 + Math.floor((processedFiles / totalFiles) * 50),\n          `Loading ${data.gameSystem.name}...`\n        );\n      } else if (data.catalogue) {\n        await gameSystem.setCatalogue(data);\n      }\n\n      processedFiles++;\n      // Update progress between 40-90%\n      progress(40 + Math.floor((processedFiles / totalFiles) * 50));\n    }\n\n    progress(95, \"Finalizing...\");\n    this.system = gameSystem;\n  }\n\n  private async loadLocalSystem(progress: (progress: number, message?: string) => void): Promise<void> {\n    progress(10, \"Loading local system...\");\n\n    // Get local systems from storage\n    const localSystemsJson = localStorage.getItem(\"local_systems\") || \"[]\";\n    const localSystems = JSON.parse(localSystemsJson);\n\n    const localSystem = localSystems.find((s: any) => s.id === this.systemId);\n    if (!localSystem) {\n      throw new Error(`Local system not found: ${this.systemId}`);\n    }\n\n    progress(50, \"Processing system data...\");\n    const { GameSystemFiles } = await import(\"~/assets/shared/battlescribe/local_game_system\");\n\n    // Create GameSystemFiles instance from stored data\n    this.system = new GameSystemFiles();\n\n    if (localSystem.gameSystem) {\n      await this.system.setSystem(localSystem.gameSystem);\n    }\n\n    if (localSystem.catalogues) {\n      for (const catalogue of Object.values(localSystem.catalogues)) {\n        await this.system.setCatalogue(catalogue);\n      }\n    }\n\n    progress(90, \"System loaded successfully\");\n  }\n}","import type { TranslationString, TranslationCatalogue } from \"../translationStore\";\nimport type { TranslationSource } from \"./index\";\n\n// NewRecruit translation source - doesn't involve any system\nexport class NewRecruitTranslationSource implements TranslationSource {\n  constructor() { }\n\n  getId(): string {\n    return \"newrecruit\";\n  }\n\n  getName(): string {\n    return \"NewRecruit (Placeholder)\";\n  }\n\n  async getTranslations(languageCode: string, progressCallback?: (progress: number, message?: string) => void): Promise<{\n    strings: Record<string, Set<string>>;\n    catalogues: TranslationCatalogue[];\n    translations: TranslationString[];\n  }> {\n    progressCallback?.(10, \"Loading NewRecruit interface strings...\");\n\n    // Example: NewRecruit has its own translatable strings\n    const newRecruitStrings = [\n      \"Welcome to NewRecruit\",\n      \"Create your army\",\n      \"Select unit\",\n      \"Add weapon\",\n      \"Remove model\",\n      \"Save roster\",\n      \"Load roster\",\n      \"Export to PDF\",\n      \"Settings\",\n      \"Help\",\n      \"About\",\n      \"Points cost\",\n      \"Unit options\",\n      \"Special rules\",\n      \"Army composition\"\n    ];\n\n    progressCallback?.(50, \"Processing interface strings...\");\n\n    const catalogueName = \"interface\";\n    const stringSet = new Set(newRecruitStrings);\n    const strings: TranslationString[] = [];\n    const allTranslations: TranslationString[] = [];\n\n    newRecruitStrings.forEach((str, index) => {\n      const translationString: TranslationString = {\n        id: `${catalogueName}-${index}`,\n        key: str,\n        original: str,\n        translation: \"\",\n        translated: false,\n        catalogue: catalogueName,\n      };\n\n      strings.push(translationString);\n      allTranslations.push(translationString);\n    });\n\n    const rawStrings: Record<string, Set<string>> = {\n      [catalogueName]: stringSet\n    };\n\n    const catalogueList: TranslationCatalogue[] = [{\n      id: catalogueName,\n      name: \"Interface Strings\",\n      stringCount: stringSet.size,\n      strings: strings,\n    }];\n\n    progressCallback?.(100, \"NewRecruit strings loaded\");\n\n    return {\n      strings: rawStrings,\n      catalogues: catalogueList,\n      translations: allTranslations\n    };\n  }\n}","import type { TranslationString, TranslationCatalogue } from \"../translationStore\";\nimport type { TranslationSource } from \"./index\";\n\n// T9A translation source (to be implemented)\nexport class T9ATranslationSource implements TranslationSource {\n  constructor(private systemId: string) {}\n\n  getId(): string {\n    return `t9a-${this.systemId}`;\n  }\n\n  getName(): string {\n    return `${this.systemId} (The 9th Age)`;\n  }\n\n  async getTranslations(languageCode: string, progressCallback?: (progress: number, message?: string) => void): Promise<{\n    strings: Record<string, Set<string>>;\n    catalogues: TranslationCatalogue[];\n    translations: TranslationString[];\n  }> {\n    // TO BE IMPLEMENTED\n    throw new Error(\"T9A translation source not yet implemented\");\n  }\n}","import type { TranslationString, TranslationCatalogue } from \"../translationStore\";\nimport type { TranslationSource } from \"./index\";\n\n// JSON-based translation source\nexport class JSONTranslationSource implements TranslationSource {\n  constructor(private jsonData: any, private sourceId: string = \"json\") {}\n\n  getId(): string {\n    return this.sourceId;\n  }\n\n  getName(): string {\n    return this.jsonData.name || \"JSON Translation Source\";\n  }\n\n  async getTranslations(languageCode: string, progressCallback?: (progress: number, message?: string) => void): Promise<{\n    strings: Record<string, Set<string>>;\n    catalogues: TranslationCatalogue[];\n    translations: TranslationString[];\n  }> {\n    const rawStrings: Record<string, Set<string>> = {};\n    const catalogueList: TranslationCatalogue[] = [];\n    const allTranslations: TranslationString[] = [];\n\n    // Extract translatable strings from JSON structure\n    if (this.jsonData.translatable_strings) {\n      const catalogueName = \"main\";\n      const stringSet = new Set<string>();\n      const strings: TranslationString[] = [];\n\n      this.jsonData.translatable_strings.forEach((str: string, index: number) => {\n        stringSet.add(str);\n        const translationString: TranslationString = {\n          id: `${catalogueName}-${index}`,\n          key: str,\n          original: str,\n          translation: \"\",\n          translated: false,\n          catalogue: catalogueName,\n        };\n\n        strings.push(translationString);\n        allTranslations.push(translationString);\n      });\n\n      rawStrings[catalogueName] = stringSet;\n      catalogueList.push({\n        id: catalogueName,\n        name: catalogueName,\n        stringCount: stringSet.size,\n        strings: strings,\n      });\n    }\n\n    return {\n      strings: rawStrings,\n      catalogues: catalogueList,\n      translations: allTranslations\n    };\n  }\n}","import type { TranslationString, TranslationCatalogue } from \"../translationStore\";\n\n// Translation source interface for extracting translatable strings from various sources\nexport interface TranslationSource {\n  // Get unique identifier for this source\n  getId(): string;\n\n  // Get display name for this source\n  getName(): string;\n\n  // Get translations for a specific language\n  getTranslations(languageCode: string, progressCallback?: (progress: number, message?: string) => void): Promise<{\n    strings: Record<string, Set<string>>;\n    catalogues: TranslationCatalogue[];\n    translations: TranslationString[];\n  }>;\n}\n\n// Re-export all sources\nexport { BSDataTranslationSource } from \"./BSDataTranslationSource\";\nexport { NewRecruitTranslationSource } from \"./NewRecruitTranslationSource\";\nexport { T9ATranslationSource } from \"./T9ATranslationSource\";\nexport { JSONTranslationSource } from \"./JSONTranslationSource\";\n\n// Import for local use\nimport { BSDataTranslationSource } from \"./BSDataTranslationSource\";\nimport { NewRecruitTranslationSource } from \"./NewRecruitTranslationSource\";\n\n// Factory function to create the appropriate translation source for any systemId\nexport function createTranslationSourceForSystem(systemId: string): TranslationSource {\n  if (systemId === \"newrecruit\") {\n    return new NewRecruitTranslationSource();\n  }\n\n  // For all other systems, assume they are BSData systems\n  return new BSDataTranslationSource(systemId);\n}\n\n// Get just the system name without loading translations\nexport async function getSystemName(systemId: string): Promise<string> {\n  const source = createTranslationSourceForSystem(systemId);\n  return source.getName();\n}"],"file":"_nuxt/C1nbJLsP.js"}