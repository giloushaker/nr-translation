{"version":3,"file":"B3f_EFRp.js","sources":["../../../../../../../assets/ts/bs_translate.ts"],"sourcesContent":["import { addObj, forEachPairRecursive, isObject } from \"../shared/battlescribe/bs_helpers\";\nimport { getDataObject } from \"../shared/battlescribe/bs_main\";\nimport { GameSystemFiles } from \"../shared/battlescribe/local_game_system\";\n\n\nexport interface ITranslatable {\n    source?: {\n        catalogue?: string,\n        nodes?: Array<{ name: string, type: string }>,\n    },\n    text: string,\n}\n\nexport function extractTranslations(system: GameSystemFiles, progressCallback: (progress: number, message: string) => void) {\n    const blacklistedKeys = new Set([\n        \"id\",\n        \"type\",\n        \"field\",\n        \"scope\",\n        \"affects\",\n        \"comment\",\n        \"info\",\n        \"typeName\",\n\n        \"authorName\",\n        \"authorContact\",\n        \"authorUrl\",\n        \"xmlns\",\n\n        \"shortName\",\n        \"publisher\",\n        \"publicatonDate\",\n        \"publisherUrl\",\n\n    ])\n    const blacklistedNodes = new Set([\n        \"costs\",\n        \"publications\"\n    ])\n    const REGEX_BSID = /^[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}$/i\n    const REGEX_NO_LETTERS = /^[^a-zA-Z]+$/\n\n\n    const result = {} as Record<string, Set<string>>\n    const files = system.getAllCatalogueFiles()\n    let cur = 0;\n    for (const file of files) {\n        const data = getDataObject(file)\n        progressCallback(cur / files.length, data.name)\n        forEachPairRecursive(data, (value: string, key, obj, path) => {\n            if (typeof value !== \"string\") return;\n            if (blacklistedKeys.has(key)) return;\n            if (key.includes('Id')) return;\n            if (value.match(REGEX_BSID)) return;\n            if (value.match(REGEX_NO_LETTERS)) return;\n            if (\"targetId\" in obj) return;\n            if (key === \"name\" && path?.at(-1) === \"characterisics\") return;\n            if (!(data.name in result)) result[data.name] = new Set()\n            result[data.name].add(value)\n        }, (value, key) => {\n            if (blacklistedNodes.has(key)) return false;\n            return true;\n        })\n        cur++;\n        progressCallback(cur / files.length, data.name)\n    }\n    return result;\n}"],"names":["extractTranslations","system","progressCallback","blacklistedKeys","blacklistedNodes","REGEX_BSID","REGEX_NO_LETTERS","result","files","cur","file","data","getDataObject","forEachPairRecursive","value","key","obj","path"],"mappings":"yCAaO,SAASA,EAAoBC,EAAyBC,EAA+D,CACxH,MAAMC,MAAsB,IAAI,CAC5B,KACA,OACA,QACA,QACA,UACA,UACA,OACA,WAEA,aACA,gBACA,YACA,QAEA,YACA,YACA,iBACA,cAAA,CAEH,EACKC,MAAuB,IAAI,CAC7B,QACA,cAAA,CACH,EACKC,EAAa,qDACbC,EAAmB,eAGnBC,EAAS,CAAA,EACTC,EAAQP,EAAO,qBAAA,EACrB,IAAIQ,EAAM,EACV,UAAWC,KAAQF,EAAO,CACtB,MAAMG,EAAOC,EAAcF,CAAI,EAC/BR,EAAiBO,EAAMD,EAAM,OAAQG,EAAK,IAAI,EAC9CE,EAAqBF,EAAM,CAACG,EAAeC,EAAKC,EAAKC,IAAS,CACtD,OAAOH,GAAU,WACjBX,EAAgB,IAAIY,CAAG,GACvBA,EAAI,SAAS,IAAI,GACjBD,EAAM,MAAMT,CAAU,GACtBS,EAAM,MAAMR,CAAgB,GAC5B,aAAcU,GACdD,IAAQ,QAAUE,GAAM,GAAG,EAAE,IAAM,mBACjCN,EAAK,QAAQJ,MAAgBI,EAAK,IAAI,EAAI,IAAI,KACpDJ,EAAOI,EAAK,IAAI,EAAE,IAAIG,CAAK,GAC/B,EAAG,CAACA,EAAOC,IACH,CAAAX,EAAiB,IAAIW,CAAG,CAE/B,EACDN,IACAP,EAAiBO,EAAMD,EAAM,OAAQG,EAAK,IAAI,CAClD,CACA,OAAOJ,CACX"}