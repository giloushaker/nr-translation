{"version":3,"file":"Czx6p1fB.js","sources":["../../../../../../fast-xml-parser/src/util.js","../../../../../../fast-xml-parser/src/validator.js","../../../../../../fast-xml-parser/src/xmlparser/OptionsBuilder.js","../../../../../../fast-xml-parser/src/xmlparser/xmlNode.js","../../../../../../fast-xml-parser/src/xmlparser/DocTypeReader.js","../../../../../../strnum/strnum.js","../../../../../../fast-xml-parser/src/ignoreAttributes.js","../../../../../../fast-xml-parser/src/xmlparser/OrderedObjParser.js","../../../../../../fast-xml-parser/src/xmlparser/node2json.js","../../../../../../fast-xml-parser/src/xmlparser/XMLParser.js","../../../../../../../assets/shared/battlescribe/bs_convert.ts"],"sourcesContent":["'use strict';\n\nconst nameStartChar = ':A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nconst nameChar = nameStartChar + '\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nexport const nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*';\nconst regexName = new RegExp('^' + nameRegexp + '$');\n\nexport function getAllMatches(string, regex) {\n  const matches = [];\n  let match = regex.exec(string);\n  while (match) {\n    const allmatches = [];\n    allmatches.startIndex = regex.lastIndex - match[0].length;\n    const len = match.length;\n    for (let index = 0; index < len; index++) {\n      allmatches.push(match[index]);\n    }\n    matches.push(allmatches);\n    match = regex.exec(string);\n  }\n  return matches;\n}\n\nexport const isName = function(string) {\n  const match = regexName.exec(string);\n  return !(match === null || typeof match === 'undefined');\n}\n\nexport function isExist(v) {\n  return typeof v !== 'undefined';\n}\n\nexport function isEmptyObject(obj) {\n  return Object.keys(obj).length === 0;\n}\n\n/**\n * Copy all the properties of a into b.\n * @param {*} target\n * @param {*} a\n */\nexport function merge(target, a, arrayMode) {\n  if (a) {\n    const keys = Object.keys(a); // will return an array of own properties\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      if (arrayMode === 'strict') {\n        target[keys[i]] = [ a[keys[i]] ];\n      } else {\n        target[keys[i]] = a[keys[i]];\n      }\n    }\n  }\n}\n/* exports.merge =function (b,a){\n  return Object.assign(b,a);\n} */\n\nexport function getValue(v) {\n  if (exports.isExist(v)) {\n    return v;\n  } else {\n    return '';\n  }\n}\n\n// const fakeCall = function(a) {return a;};\n// const fakeCallNoReturn = function() {};","'use strict';\n\nimport {getAllMatches, isName} from './util.js';\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n  unpairedTags: []\n};\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexport function validate(xmlData, options) {\n  options = Object.assign({}, defaultOptions, options);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n  \n  for (let i = 0; i < xmlData.length; i++) {\n\n    if (xmlData[i] === '<' && xmlData[i+1] === '?') {\n      i+=2;\n      i = readPI(xmlData,i);\n      if (i.err) return i;\n    }else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n      let tagStartPos = i;\n      i++;\n      \n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"Invalid space after '<'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          const attrStrStart = i - attrStr.length;\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else if (tags.length === 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' has not been opened.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg.tagName) {\n              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\n              return getErrorObject('InvalidTag',\n                \"Expected closing tag '\"+otg.tagName+\"' (opened in line \"+openPos.line+\", col \"+openPos.col+\") instead of closing tag '\"+tagName+\"'.\",\n                getLineNumberForPosition(xmlData, tagStartPos));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else if(options.unpairedTags.indexOf(tagName) !== -1){\n            //don't push into stack\n          } else {\n            tags.push({tagName, tagStartPos});\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i+1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else{\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }else{\n            if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {\n              return getErrorObject('InvalidXml', \"Extra text at the end\", getLineNumberForPosition(xmlData, i));\n            }\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if ( isWhiteSpace(xmlData[i])) {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  }else if (tags.length == 1) {\n      return getErrorObject('InvalidTag', \"Unclosed tag '\"+tags[0].tagName+\"'.\", getLineNumberForPosition(xmlData, tags[0].tagStartPos));\n  }else if (tags.length > 0) {\n      return getErrorObject('InvalidXml', \"Invalid '\"+\n          JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\\r?\\n/g, '')+\n          \"' found.\", {line: 1, col: 1});\n  }\n\n  return true;\n};\n\nfunction isWhiteSpace(char){\n  return char === ' ' || char === '\\t' || char === '\\n'  || char === '\\r';\n}\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  const start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      const tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nconst doubleQuote = '\"';\nconst singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(matches[i]))\n    } else if (matches[i][3] !== undefined && matches[i][4] === undefined) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' is without value.\", getPositionFromMatch(matches[i]));\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(matches[i]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(matches[i]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(matches[i]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber.line || lineNumber,\n      col: lineNumber.col,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  const lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return {\n    line: lines.length,\n\n    // column number is last line's length + 1, because column numbering starts at 1:\n    col: lines[lines.length - 1].length + 1\n  };\n}\n\n//this function returns the position of the first character of match within attrStr\nfunction getPositionFromMatch(match) {\n  return match.startIndex + match[1].length;\n}\n","\nexport const defaultOptions = {\n    preserveOrder: false,\n    attributeNamePrefix: '@_',\n    attributesGroupName: false,\n    textNodeName: '#text',\n    ignoreAttributes: true,\n    removeNSPrefix: false, // remove NS from tag name or attribute name if true\n    allowBooleanAttributes: false, //a tag can have attributes without any value\n    //ignoreRootElement : false,\n    parseTagValue: true,\n    parseAttributeValue: false,\n    trimValues: true, //Trim string values of tag and attributes\n    cdataPropName: false,\n    numberParseOptions: {\n      hex: true,\n      leadingZeros: true,\n      eNotation: true\n    },\n    tagValueProcessor: function(tagName, val) {\n      return val;\n    },\n    attributeValueProcessor: function(attrName, val) {\n      return val;\n    },\n    stopNodes: [], //nested tags will not be parsed even for errors\n    alwaysCreateTextNode: false,\n    isArray: () => false,\n    commentPropName: false,\n    unpairedTags: [],\n    processEntities: true,\n    htmlEntities: false,\n    ignoreDeclaration: false,\n    ignorePiTags: false,\n    transformTagName: false,\n    transformAttributeName: false,\n    updateTag: function(tagName, jPath, attrs){\n      return tagName\n    },\n    // skipEmptyListItem: false\n    captureMetaData: false,\n};\n   \nexport const buildOptions = function(options) {\n    return Object.assign({}, defaultOptions, options);\n};\n","'use strict';\n\nlet METADATA_SYMBOL;\n\nif (typeof Symbol !== \"function\") {\n  METADATA_SYMBOL = \"@@xmlMetadata\";\n} else {\n  METADATA_SYMBOL = Symbol(\"XML Node Metadata\");\n}\n\nexport default class XmlNode{\n  constructor(tagname) {\n    this.tagname = tagname;\n    this.child = []; //nested tags, text, cdata, comments in order\n    this[\":@\"] = {}; //attributes map\n  }\n  add(key,val){\n    // this.child.push( {name : key, val: val, isCdata: isCdata });\n    if(key === \"__proto__\") key = \"#__proto__\";\n    this.child.push( {[key]: val });\n  }\n  addChild(node, startIndex) {\n    if(node.tagname === \"__proto__\") node.tagname = \"#__proto__\";\n    if(node[\":@\"] && Object.keys(node[\":@\"]).length > 0){\n      this.child.push( { [node.tagname]: node.child, [\":@\"]: node[\":@\"] });\n    }else{\n      this.child.push( { [node.tagname]: node.child });\n    }\n    // if requested, add the startIndex\n    if (startIndex !== undefined) {\n      // Note: for now we just overwrite the metadata. If we had more complex metadata,\n      // we might need to do an object append here:  metadata = { ...metadata, startIndex }\n      this.child[this.child.length - 1][METADATA_SYMBOL] = { startIndex };\n    }\n  }\n  /** symbol used for metadata */\n  static getMetaDataSymbol() {\n    return METADATA_SYMBOL;\n  }\n}\n","import {isName} from '../util.js';\n\n//TODO: handle comments\nexport default function readDocType(xmlData, i){\n    \n    const entities = {};\n    if( xmlData[i + 3] === 'O' &&\n         xmlData[i + 4] === 'C' &&\n         xmlData[i + 5] === 'T' &&\n         xmlData[i + 6] === 'Y' &&\n         xmlData[i + 7] === 'P' &&\n         xmlData[i + 8] === 'E')\n    {    \n        i = i+9;\n        let angleBracketsCount = 1;\n        let hasBody = false, comment = false;\n        let exp = \"\";\n        for(;i<xmlData.length;i++){\n            if (xmlData[i] === '<' && !comment) { //Determine the tag type\n                if( hasBody && hasSeq(xmlData, \"!ENTITY\",i)){\n                    i += 7; \n                    let entityName, val;\n                    [entityName, val,i] = readEntityExp(xmlData,i+1);\n                    if(val.indexOf(\"&\") === -1) //Parameter entities are not supported\n                        entities[ entityName ] = {\n                            regx : RegExp( `&${entityName};`,\"g\"),\n                            val: val\n                        };\n                }\n                else if( hasBody && hasSeq(xmlData, \"!ELEMENT\",i))  {\n                    i += 8;//Not supported\n                    const {index} = readElementExp(xmlData,i+1);\n                    i = index;\n                }else if( hasBody && hasSeq(xmlData, \"!ATTLIST\",i)){\n                    i += 8;//Not supported\n                    // const {index} = readAttlistExp(xmlData,i+1);\n                    // i = index;\n                }else if( hasBody && hasSeq(xmlData, \"!NOTATION\",i)) {\n                    i += 9;//Not supported\n                    const {index} = readNotationExp(xmlData,i+1);\n                    i = index;\n                }else if( hasSeq(xmlData, \"!--\",i) ) comment = true;\n                else throw new Error(`Invalid DOCTYPE`);\n\n                angleBracketsCount++;\n                exp = \"\";\n            } else if (xmlData[i] === '>') { //Read tag content\n                if(comment){\n                    if( xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\"){\n                        comment = false;\n                        angleBracketsCount--;\n                    }\n                }else{\n                    angleBracketsCount--;\n                }\n                if (angleBracketsCount === 0) {\n                  break;\n                }\n            }else if( xmlData[i] === '['){\n                hasBody = true;\n            }else{\n                exp += xmlData[i];\n            }\n        }\n        if(angleBracketsCount !== 0){\n            throw new Error(`Unclosed DOCTYPE`);\n        }\n    }else{\n        throw new Error(`Invalid Tag instead of DOCTYPE`);\n    }\n    return {entities, i};\n}\n\nconst skipWhitespace = (data, index) => {\n    while (index < data.length && /\\s/.test(data[index])) {\n        index++;\n    }\n    return index;\n};\n\nfunction readEntityExp(xmlData, i) {    \n    //External entities are not supported\n    //    <!ENTITY ext SYSTEM \"http://normal-website.com\" >\n\n    //Parameter entities are not supported\n    //    <!ENTITY entityname \"&anotherElement;\">\n\n    //Internal entities are supported\n    //    <!ENTITY entityname \"replacement text\">\n\n    // Skip leading whitespace after <!ENTITY\n    i = skipWhitespace(xmlData, i);\n\n    // Read entity name\n    let entityName = \"\";\n    while (i < xmlData.length && !/\\s/.test(xmlData[i]) && xmlData[i] !== '\"' && xmlData[i] !== \"'\") {\n        entityName += xmlData[i];\n        i++;\n    }\n    validateEntityName(entityName);\n\n    // Skip whitespace after entity name\n    i = skipWhitespace(xmlData, i);\n\n    // Check for unsupported constructs (external entities or parameter entities)\n    if (xmlData.substring(i, i + 6).toUpperCase() === \"SYSTEM\") {\n        throw new Error(\"External entities are not supported\");\n    }else if (xmlData[i] === \"%\") {\n        throw new Error(\"Parameter entities are not supported\");\n    }\n\n    // Read entity value (internal entity)\n    let entityValue = \"\";\n    [i, entityValue] = readIdentifierVal(xmlData, i, \"entity\");\n    i--;\n    return [entityName, entityValue, i ];\n}\n\nfunction readNotationExp(xmlData, i) {\n    // Skip leading whitespace after <!NOTATION\n    i = skipWhitespace(xmlData, i);\n\n    // Read notation name\n    let notationName = \"\";\n    while (i < xmlData.length && !/\\s/.test(xmlData[i])) {\n        notationName += xmlData[i];\n        i++;\n    }\n    validateEntityName(notationName);\n\n    // Skip whitespace after notation name\n    i = skipWhitespace(xmlData, i);\n\n    // Check identifier type (SYSTEM or PUBLIC)\n    const identifierType = xmlData.substring(i, i + 6).toUpperCase();\n    if (identifierType !== \"SYSTEM\" && identifierType !== \"PUBLIC\") {\n        throw new Error(`Expected SYSTEM or PUBLIC, found \"${identifierType}\"`);\n    }\n    i += identifierType.length;\n\n    // Skip whitespace after identifier type\n    i = skipWhitespace(xmlData, i);\n\n    // Read public identifier (if PUBLIC)\n    let publicIdentifier = null;\n    let systemIdentifier = null;\n\n    if (identifierType === \"PUBLIC\") {\n        [i, publicIdentifier ] = readIdentifierVal(xmlData, i, \"publicIdentifier\");\n\n        // Skip whitespace after public identifier\n        i = skipWhitespace(xmlData, i);\n\n        // Optionally read system identifier\n        if (xmlData[i] === '\"' || xmlData[i] === \"'\") {\n            [i, systemIdentifier ] = readIdentifierVal(xmlData, i,\"systemIdentifier\");\n        }\n    } else if (identifierType === \"SYSTEM\") {\n        // Read system identifier (mandatory for SYSTEM)\n        [i, systemIdentifier ] = readIdentifierVal(xmlData, i, \"systemIdentifier\");\n\n        if (!systemIdentifier) {\n            throw new Error(\"Missing mandatory system identifier for SYSTEM notation\");\n        }\n    }\n    \n    return {notationName, publicIdentifier, systemIdentifier, index: --i};\n}\n\nfunction readIdentifierVal(xmlData, i, type) {\n    let identifierVal = \"\";\n    const startChar = xmlData[i];\n    if (startChar !== '\"' && startChar !== \"'\") {\n        throw new Error(`Expected quoted string, found \"${startChar}\"`);\n    }\n    i++;\n\n    while (i < xmlData.length && xmlData[i] !== startChar) {\n        identifierVal += xmlData[i];\n        i++;\n    }\n\n    if (xmlData[i] !== startChar) {\n        throw new Error(`Unterminated ${type} value`);\n    }\n    i++;\n    return [i, identifierVal];\n}\n\nfunction readElementExp(xmlData, i) {\n    // <!ELEMENT br EMPTY>\n    // <!ELEMENT div ANY>\n    // <!ELEMENT title (#PCDATA)>\n    // <!ELEMENT book (title, author+)>\n    // <!ELEMENT name (content-model)>\n    \n    // Skip leading whitespace after <!ELEMENT\n    i = skipWhitespace(xmlData, i);\n\n    // Read element name\n    let elementName = \"\";\n    while (i < xmlData.length && !/\\s/.test(xmlData[i])) {\n        elementName += xmlData[i];\n        i++;\n    }\n\n    // Validate element name\n    if (!validateEntityName(elementName)) {\n        throw new Error(`Invalid element name: \"${elementName}\"`);\n    }\n\n    // Skip whitespace after element name\n    i = skipWhitespace(xmlData, i);\n    let contentModel = \"\";\n    // Expect '(' to start content model\n    if(xmlData[i] === \"E\" && hasSeq(xmlData, \"MPTY\",i)) i+=4;\n    else if(xmlData[i] === \"A\" && hasSeq(xmlData, \"NY\",i)) i+=2;\n    else if (xmlData[i] === \"(\") {\n        i++; // Move past '('\n\n        // Read content model\n        while (i < xmlData.length && xmlData[i] !== \")\") {\n            contentModel += xmlData[i];\n            i++;\n        }\n        if (xmlData[i] !== \")\") {\n            throw new Error(\"Unterminated content model\");\n        }\n\n    }else{\n        throw new Error(`Invalid Element Expression, found \"${xmlData[i]}\"`);\n    }\n    \n    return {\n        elementName,\n        contentModel: contentModel.trim(),\n        index: i\n    };\n}\n\nfunction readAttlistExp(xmlData, i) {\n    // Skip leading whitespace after <!ATTLIST\n    i = skipWhitespace(xmlData, i);\n\n    // Read element name\n    let elementName = \"\";\n    while (i < xmlData.length && !/\\s/.test(xmlData[i])) {\n        elementName += xmlData[i];\n        i++;\n    }\n\n    // Validate element name\n    validateEntityName(elementName)\n\n    // Skip whitespace after element name\n    i = skipWhitespace(xmlData, i);\n\n    // Read attribute name\n    let attributeName = \"\";\n    while (i < xmlData.length && !/\\s/.test(xmlData[i])) {\n        attributeName += xmlData[i];\n        i++;\n    }\n\n    // Validate attribute name\n    if (!validateEntityName(attributeName)) {\n        throw new Error(`Invalid attribute name: \"${attributeName}\"`);\n    }\n\n    // Skip whitespace after attribute name\n    i = skipWhitespace(xmlData, i);\n\n    // Read attribute type\n    let attributeType = \"\";\n    if (xmlData.substring(i, i + 8).toUpperCase() === \"NOTATION\") {\n        attributeType = \"NOTATION\";\n        i += 8; // Move past \"NOTATION\"\n\n        // Skip whitespace after \"NOTATION\"\n        i = skipWhitespace(xmlData, i);\n\n        // Expect '(' to start the list of notations\n        if (xmlData[i] !== \"(\") {\n            throw new Error(`Expected '(', found \"${xmlData[i]}\"`);\n        }\n        i++; // Move past '('\n\n        // Read the list of allowed notations\n        let allowedNotations = [];\n        while (i < xmlData.length && xmlData[i] !== \")\") {\n            let notation = \"\";\n            while (i < xmlData.length && xmlData[i] !== \"|\" && xmlData[i] !== \")\") {\n                notation += xmlData[i];\n                i++;\n            }\n\n            // Validate notation name\n            notation = notation.trim();\n            if (!validateEntityName(notation)) {\n                throw new Error(`Invalid notation name: \"${notation}\"`);\n            }\n\n            allowedNotations.push(notation);\n\n            // Skip '|' separator or exit loop\n            if (xmlData[i] === \"|\") {\n                i++; // Move past '|'\n                i = skipWhitespace(xmlData, i); // Skip optional whitespace after '|'\n            }\n        }\n\n        if (xmlData[i] !== \")\") {\n            throw new Error(\"Unterminated list of notations\");\n        }\n        i++; // Move past ')'\n\n        // Store the allowed notations as part of the attribute type\n        attributeType += \" (\" + allowedNotations.join(\"|\") + \")\";\n    } else {\n        // Handle simple types (e.g., CDATA, ID, IDREF, etc.)\n        while (i < xmlData.length && !/\\s/.test(xmlData[i])) {\n            attributeType += xmlData[i];\n            i++;\n        }\n\n        // Validate simple attribute type\n        const validTypes = [\"CDATA\", \"ID\", \"IDREF\", \"IDREFS\", \"ENTITY\", \"ENTITIES\", \"NMTOKEN\", \"NMTOKENS\"];\n        if (!validTypes.includes(attributeType.toUpperCase())) {\n            throw new Error(`Invalid attribute type: \"${attributeType}\"`);\n        }\n    }\n\n    // Skip whitespace after attribute type\n    i = skipWhitespace(xmlData, i);\n\n    // Read default value\n    let defaultValue = \"\";\n    if (xmlData.substring(i, i + 8).toUpperCase() === \"#REQUIRED\") {\n        defaultValue = \"#REQUIRED\";\n        i += 8;\n    } else if (xmlData.substring(i, i + 7).toUpperCase() === \"#IMPLIED\") {\n        defaultValue = \"#IMPLIED\";\n        i += 7;\n    } else {\n        [i, defaultValue] = readIdentifierVal(xmlData, i, \"ATTLIST\");\n    }\n\n    return {\n        elementName,\n        attributeName,\n        attributeType,\n        defaultValue,\n        index: i\n    }\n}\n\nfunction hasSeq(data, seq,i){\n    for(let j=0;j<seq.length;j++){\n        if(seq[j]!==data[i+j+1]) return false;\n    }\n    return true;\n}\n\nfunction validateEntityName(name){\n    if (isName(name))\n\treturn name;\n    else\n        throw new Error(`Invalid entity name ${name}`);\n}\n","const hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;\nconst numRegex = /^([\\-\\+])?(0*)([0-9]*(\\.[0-9]*)?)$/;\n// const octRegex = /^0x[a-z0-9]+/;\n// const binRegex = /0x[a-z0-9]+/;\n\n \nconst consider = {\n    hex :  true,\n    // oct: false,\n    leadingZeros: true,\n    decimalPoint: \"\\.\",\n    eNotation: true,\n    //skipLike: /regex/\n};\n\nexport default function toNumber(str, options = {}){\n    options = Object.assign({}, consider, options );\n    if(!str || typeof str !== \"string\" ) return str;\n    \n    let trimmedStr  = str.trim();\n    \n    if(options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;\n    else if(str===\"0\") return 0;\n    else if (options.hex && hexRegex.test(trimmedStr)) {\n        return parse_int(trimmedStr, 16);\n    // }else if (options.oct && octRegex.test(str)) {\n    //     return Number.parseInt(val, 8);\n    }else if (trimmedStr.search(/.+[eE].+/)!== -1) { //eNotation\n        return resolveEnotation(str,trimmedStr,options);\n    // }else if (options.parseBin && binRegex.test(str)) {\n    //     return Number.parseInt(val, 2);\n    }else{\n        //separate negative sign, leading zeros, and rest number\n        const match = numRegex.exec(trimmedStr);\n        // +00.123 => [ , '+', '00', '.123', ..\n        if(match){\n            const sign = match[1] || \"\";\n            const leadingZeros = match[2];\n            let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros\n            const decimalAdjacentToLeadingZeros = sign ? // 0., -00., 000.\n                str[leadingZeros.length+1] === \".\" \n                : str[leadingZeros.length] === \".\";\n\n            //trim ending zeros for floating number\n            if(!options.leadingZeros //leading zeros are not allowed\n                && (leadingZeros.length > 1 \n                    || (leadingZeros.length === 1 && !decimalAdjacentToLeadingZeros))){\n                // 00, 00.3, +03.24, 03, 03.24\n                return str;\n            }\n            else{//no leading zeros or leading zeros are allowed\n                const num = Number(trimmedStr);\n                const parsedStr = String(num);\n\n                if( num === 0) return num;\n                if(parsedStr.search(/[eE]/) !== -1){ //given number is long and parsed to eNotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(trimmedStr.indexOf(\".\") !== -1){ //floating number\n                    if(parsedStr === \"0\") return num; //0.0\n                    else if(parsedStr === numTrimmedByZeros) return num; //0.456. 0.79000\n                    else if( parsedStr === `${sign}${numTrimmedByZeros}`) return num;\n                    else return str;\n                }\n                \n                let n = leadingZeros? numTrimmedByZeros : trimmedStr;\n                if(leadingZeros){\n                    // -009 => -9\n                    return (n === parsedStr) || (sign+n === parsedStr) ? num : str\n                }else  {\n                    // +9\n                    return (n === parsedStr) || (n === sign+parsedStr) ? num : str\n                }\n            }\n        }else{ //non-numeric string\n            return str;\n        }\n    }\n}\n\nconst eNotationRegx = /^([-+])?(0*)(\\d*(\\.\\d*)?[eE][-\\+]?\\d+)$/;\nfunction resolveEnotation(str,trimmedStr,options){\n    if(!options.eNotation) return str;\n    const notation = trimmedStr.match(eNotationRegx); \n    if(notation){\n        let sign = notation[1] || \"\";\n        const eChar = notation[3].indexOf(\"e\") === -1 ? \"E\" : \"e\";\n        const leadingZeros = notation[2];\n        const eAdjacentToLeadingZeros = sign ? // 0E.\n            str[leadingZeros.length+1] === eChar \n            : str[leadingZeros.length] === eChar;\n\n        if(leadingZeros.length > 1 && eAdjacentToLeadingZeros) return str;\n        else if(leadingZeros.length === 1 \n            && (notation[3].startsWith(`.${eChar}`) || notation[3][0] === eChar)){\n                return Number(trimmedStr);\n        }else if(options.leadingZeros && !eAdjacentToLeadingZeros){ //accept with leading zeros\n            //remove leading 0s\n            trimmedStr = (notation[1] || \"\") + notation[3];\n            return Number(trimmedStr);\n        }else return str;\n    }else{\n        return str;\n    }\n}\n\n/**\n * \n * @param {string} numStr without leading zeros\n * @returns \n */\nfunction trimZeros(numStr){\n    if(numStr && numStr.indexOf(\".\") !== -1){//float\n        numStr = numStr.replace(/0+$/, \"\"); //remove ending zeros\n        if(numStr === \".\")  numStr = \"0\";\n        else if(numStr[0] === \".\")  numStr = \"0\"+numStr;\n        else if(numStr[numStr.length-1] === \".\")  numStr = numStr.substring(0,numStr.length-1);\n        return numStr;\n    }\n    return numStr;\n}\n\nfunction parse_int(numStr, base){\n    //polyfill\n    if(parseInt) return parseInt(numStr, base);\n    else if(Number.parseInt) return Number.parseInt(numStr, base);\n    else if(window && window.parseInt) return window.parseInt(numStr, base);\n    else throw new Error(\"parseInt, Number.parseInt, window.parseInt are not supported\")\n}","export default function getIgnoreAttributesFn(ignoreAttributes) {\n    if (typeof ignoreAttributes === 'function') {\n        return ignoreAttributes\n    }\n    if (Array.isArray(ignoreAttributes)) {\n        return (attrName) => {\n            for (const pattern of ignoreAttributes) {\n                if (typeof pattern === 'string' && attrName === pattern) {\n                    return true\n                }\n                if (pattern instanceof RegExp && pattern.test(attrName)) {\n                    return true\n                }\n            }\n        }\n    }\n    return () => false\n}","'use strict';\n///@ts-check\n\nimport {getAllMatches, isExist} from '../util.js';\nimport xmlNode from './xmlNode.js';\nimport readDocType from './DocTypeReader.js';\nimport toNumber from \"strnum\";\nimport getIgnoreAttributesFn from \"../ignoreAttributes.js\";\n\n// const regx =\n//   '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n//   .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\nexport default class OrderedObjParser{\n  constructor(options){\n    this.options = options;\n    this.currentNode = null;\n    this.tagsNodeStack = [];\n    this.docTypeEntities = {};\n    this.lastEntities = {\n      \"apos\" : { regex: /&(apos|#39|#x27);/g, val : \"'\"},\n      \"gt\" : { regex: /&(gt|#62|#x3E);/g, val : \">\"},\n      \"lt\" : { regex: /&(lt|#60|#x3C);/g, val : \"<\"},\n      \"quot\" : { regex: /&(quot|#34|#x22);/g, val : \"\\\"\"},\n    };\n    this.ampEntity = { regex: /&(amp|#38|#x26);/g, val : \"&\"};\n    this.htmlEntities = {\n      \"space\": { regex: /&(nbsp|#160);/g, val: \" \" },\n      // \"lt\" : { regex: /&(lt|#60);/g, val: \"<\" },\n      // \"gt\" : { regex: /&(gt|#62);/g, val: \">\" },\n      // \"amp\" : { regex: /&(amp|#38);/g, val: \"&\" },\n      // \"quot\" : { regex: /&(quot|#34);/g, val: \"\\\"\" },\n      // \"apos\" : { regex: /&(apos|#39);/g, val: \"'\" },\n      \"cent\" : { regex: /&(cent|#162);/g, val: \"¢\" },\n      \"pound\" : { regex: /&(pound|#163);/g, val: \"£\" },\n      \"yen\" : { regex: /&(yen|#165);/g, val: \"¥\" },\n      \"euro\" : { regex: /&(euro|#8364);/g, val: \"€\" },\n      \"copyright\" : { regex: /&(copy|#169);/g, val: \"©\" },\n      \"reg\" : { regex: /&(reg|#174);/g, val: \"®\" },\n      \"inr\" : { regex: /&(inr|#8377);/g, val: \"₹\" },\n      \"num_dec\": { regex: /&#([0-9]{1,7});/g, val : (_, str) => String.fromCodePoint(Number.parseInt(str, 10)) },\n      \"num_hex\": { regex: /&#x([0-9a-fA-F]{1,6});/g, val : (_, str) => String.fromCodePoint(Number.parseInt(str, 16)) },\n    };\n    this.addExternalEntities = addExternalEntities;\n    this.parseXml = parseXml;\n    this.parseTextData = parseTextData;\n    this.resolveNameSpace = resolveNameSpace;\n    this.buildAttributesMap = buildAttributesMap;\n    this.isItStopNode = isItStopNode;\n    this.replaceEntitiesValue = replaceEntitiesValue;\n    this.readStopNodeData = readStopNodeData;\n    this.saveTextToParentTag = saveTextToParentTag;\n    this.addChild = addChild;\n    this.ignoreAttributesFn = getIgnoreAttributesFn(this.options.ignoreAttributes)\n  }\n\n}\n\nfunction addExternalEntities(externalEntities){\n  const entKeys = Object.keys(externalEntities);\n  for (let i = 0; i < entKeys.length; i++) {\n    const ent = entKeys[i];\n    this.lastEntities[ent] = {\n       regex: new RegExp(\"&\"+ent+\";\",\"g\"),\n       val : externalEntities[ent]\n    }\n  }\n}\n\n/**\n * @param {string} val\n * @param {string} tagName\n * @param {string} jPath\n * @param {boolean} dontTrim\n * @param {boolean} hasAttributes\n * @param {boolean} isLeafNode\n * @param {boolean} escapeEntities\n */\nfunction parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {\n  if (val !== undefined) {\n    if (this.options.trimValues && !dontTrim) {\n      val = val.trim();\n    }\n    if(val.length > 0){\n      if(!escapeEntities) val = this.replaceEntitiesValue(val);\n      \n      const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);\n      if(newval === null || newval === undefined){\n        //don't parse\n        return val;\n      }else if(typeof newval !== typeof val || newval !== val){\n        //overwrite\n        return newval;\n      }else if(this.options.trimValues){\n        return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n      }else{\n        const trimmedVal = val.trim();\n        if(trimmedVal === val){\n          return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n        }else{\n          return val;\n        }\n      }\n    }\n  }\n}\n\nfunction resolveNameSpace(tagname) {\n  if (this.options.removeNSPrefix) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])([\\\\s\\\\S]*?)\\\\3)?', 'gm');\n\nfunction buildAttributesMap(attrStr, jPath, tagName) {\n  if (this.options.ignoreAttributes !== true && typeof attrStr === 'string') {\n    // attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = this.resolveNameSpace(matches[i][1]);\n      if (this.ignoreAttributesFn(attrName, jPath)) {\n        continue\n      }\n      let oldVal = matches[i][4];\n      let aName = this.options.attributeNamePrefix + attrName;\n      if (attrName.length) {\n        if (this.options.transformAttributeName) {\n          aName = this.options.transformAttributeName(aName);\n        }\n        if(aName === \"__proto__\") aName  = \"#__proto__\";\n        if (oldVal !== undefined) {\n          if (this.options.trimValues) {\n            oldVal = oldVal.trim();\n          }\n          oldVal = this.replaceEntitiesValue(oldVal);\n          const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);\n          if(newVal === null || newVal === undefined){\n            //don't parse\n            attrs[aName] = oldVal;\n          }else if(typeof newVal !== typeof oldVal || newVal !== oldVal){\n            //overwrite\n            attrs[aName] = newVal;\n          }else{\n            //parse\n            attrs[aName] = parseValue(\n              oldVal,\n              this.options.parseAttributeValue,\n              this.options.numberParseOptions\n            );\n          }\n        } else if (this.options.allowBooleanAttributes) {\n          attrs[aName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (this.options.attributesGroupName) {\n      const attrCollection = {};\n      attrCollection[this.options.attributesGroupName] = attrs;\n      return attrCollection;\n    }\n    return attrs\n  }\n}\n\nconst parseXml = function(xmlData) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\"); //TODO: remove this line\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n  let jPath = \"\";\n  for(let i=0; i< xmlData.length; i++){//for each char in XML data\n    const ch = xmlData[i];\n    if(ch === '<'){\n      // const nextIndex = i+1;\n      // const _2ndChar = xmlData[nextIndex];\n      if( xmlData[i+1] === '/') {//Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\n\n        if(this.options.removeNSPrefix){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        if(this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n\n        if(currentNode){\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        }\n\n        //check if last tag of nested tag was unpaired tag\n        const lastTagName = jPath.substring(jPath.lastIndexOf(\".\")+1);\n        if(tagName && this.options.unpairedTags.indexOf(tagName) !== -1 ){\n          throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);\n        }\n        let propIndex = 0\n        if(lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1 ){\n          propIndex = jPath.lastIndexOf('.', jPath.lastIndexOf('.')-1)\n          this.tagsNodeStack.pop();\n        }else{\n          propIndex = jPath.lastIndexOf(\".\");\n        }\n        jPath = jPath.substring(0, propIndex);\n\n        currentNode = this.tagsNodeStack.pop();//avoid recursion, set the parent tag scope\n        textData = \"\";\n        i = closeIndex;\n      } else if( xmlData[i+1] === '?') {\n\n        let tagData = readTagExp(xmlData,i, false, \"?>\");\n        if(!tagData) throw new Error(\"Pi Tag is not closed.\");\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        if( (this.options.ignoreDeclaration && tagData.tagName === \"?xml\") || this.options.ignorePiTags){\n\n        }else{\n  \n          const childNode = new xmlNode(tagData.tagName);\n          childNode.add(this.options.textNodeName, \"\");\n          \n          if(tagData.tagName !== tagData.tagExp && tagData.attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);\n          }\n          this.addChild(currentNode, childNode, jPath, i);\n        }\n\n\n        i = tagData.closeIndex + 1;\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\n        const endIndex = findClosingIndex(xmlData, \"-->\", i+4, \"Comment is not closed.\")\n        if(this.options.commentPropName){\n          const comment = xmlData.substring(i + 4, endIndex - 2);\n\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n          currentNode.add(this.options.commentPropName, [ { [this.options.textNodeName] : comment } ]);\n        }\n        i = endIndex;\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\n        const result = readDocType(xmlData, i);\n        this.docTypeEntities = result.entities;\n        i = result.i;\n      }else if(xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2;\n        const tagExp = xmlData.substring(i + 9,closeIndex);\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n        let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true, true);\n        if(val == undefined) val = \"\";\n\n        //cdata should be set even if it is 0 length string\n        if(this.options.cdataPropName){\n          currentNode.add(this.options.cdataPropName, [ { [this.options.textNodeName] : tagExp } ]);\n        }else{\n          currentNode.add(this.options.textNodeName, val);\n        }\n        \n        i = closeIndex + 2;\n      }else {//Opening tag\n        let result = readTagExp(xmlData,i, this.options.removeNSPrefix);\n        let tagName= result.tagName;\n        const rawTagName = result.rawTagName;\n        let tagExp = result.tagExp;\n        let attrExpPresent = result.attrExpPresent;\n        let closeIndex = result.closeIndex;\n\n        if (this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n        \n        //save text as child node\n        if (currentNode && textData) {\n          if(currentNode.tagname !== '!xml'){\n            //when nested tag is found\n            textData = this.saveTextToParentTag(textData, currentNode, jPath, false);\n          }\n        }\n\n        //check if last tag was unpaired tag\n        const lastTag = currentNode;\n        if(lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1 ){\n          currentNode = this.tagsNodeStack.pop();\n          jPath = jPath.substring(0, jPath.lastIndexOf(\".\"));\n        }\n        if(tagName !== xmlObj.tagname){\n          jPath += jPath ? \".\" + tagName : tagName;\n        }\n        const startIndex = i;\n        if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {\n          let tagContent = \"\";\n          //self-closing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            i = result.closeIndex;\n          }\n          //unpaired tag\n          else if(this.options.unpairedTags.indexOf(tagName) !== -1){\n            \n            i = result.closeIndex;\n          }\n          //normal tag\n          else{\n            //read until closing tag is found\n            const result = this.readStopNodeData(xmlData, rawTagName, closeIndex + 1);\n            if(!result) throw new Error(`Unexpected end of ${rawTagName}`);\n            i = result.i;\n            tagContent = result.tagContent;\n          }\n\n          const childNode = new xmlNode(tagName);\n\n          if(tagName !== tagExp && attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n          }\n          if(tagContent) {\n            tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);\n          }\n          \n          jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          childNode.add(this.options.textNodeName, tagContent);\n          \n          this.addChild(currentNode, childNode, jPath, startIndex);\n        }else{\n  //selfClosing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            \n            if(this.options.transformTagName) {\n              tagName = this.options.transformTagName(tagName);\n            }\n\n            const childNode = new xmlNode(tagName);\n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath, startIndex);\n            jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          }\n    //opening tag\n          else{\n            const childNode = new xmlNode( tagName);\n            this.tagsNodeStack.push(currentNode);\n            \n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath, startIndex);\n            currentNode = childNode;\n          }\n          textData = \"\";\n          i = closeIndex;\n        }\n      }\n    }else{\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj.child;\n}\n\nfunction addChild(currentNode, childNode, jPath, startIndex){\n  // unset startIndex if not requested\n  if (!this.options.captureMetaData) startIndex = undefined;\n  const result = this.options.updateTag(childNode.tagname, jPath, childNode[\":@\"])\n  if(result === false){\n  } else if(typeof result === \"string\"){\n    childNode.tagname = result\n    currentNode.addChild(childNode, startIndex);\n  }else{\n    currentNode.addChild(childNode, startIndex);\n  }\n}\n\nconst replaceEntitiesValue = function(val){\n\n  if(this.options.processEntities){\n    for(let entityName in this.docTypeEntities){\n      const entity = this.docTypeEntities[entityName];\n      val = val.replace( entity.regx, entity.val);\n    }\n    for(let entityName in this.lastEntities){\n      const entity = this.lastEntities[entityName];\n      val = val.replace( entity.regex, entity.val);\n    }\n    if(this.options.htmlEntities){\n      for(let entityName in this.htmlEntities){\n        const entity = this.htmlEntities[entityName];\n        val = val.replace( entity.regex, entity.val);\n      }\n    }\n    val = val.replace( this.ampEntity.regex, this.ampEntity.val);\n  }\n  return val;\n}\nfunction saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {\n  if (textData) { //store previously collected data as textNode\n    if(isLeafNode === undefined) isLeafNode = currentNode.child.length === 0\n    \n    textData = this.parseTextData(textData,\n      currentNode.tagname,\n      jPath,\n      false,\n      currentNode[\":@\"] ? Object.keys(currentNode[\":@\"]).length !== 0 : false,\n      isLeafNode);\n\n    if (textData !== undefined && textData !== \"\")\n      currentNode.add(this.options.textNodeName, textData);\n    textData = \"\";\n  }\n  return textData;\n}\n\n//TODO: use jPath to simplify the logic\n/**\n * \n * @param {string[]} stopNodes \n * @param {string} jPath\n * @param {string} currentTagName \n */\nfunction isItStopNode(stopNodes, jPath, currentTagName){\n  const allNodesExp = \"*.\" + currentTagName;\n  for (const stopNodePath in stopNodes) {\n    const stopNodeExp = stopNodes[stopNodePath];\n    if( allNodesExp === stopNodeExp || jPath === stopNodeExp  ) return true;\n  }\n  return false;\n}\n\n/**\n * Returns the tag Expression and where it is ending handling single-double quotes situation\n * @param {string} xmlData \n * @param {number} i starting index\n * @returns \n */\nfunction tagExpWithClosingIndex(xmlData, i, closingChar = \">\"){\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < xmlData.length; index++) {\n    let ch = xmlData[index];\n    if (attrBoundary) {\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\n    } else if (ch === '\"' || ch === \"'\") {\n        attrBoundary = ch;\n    } else if (ch === closingChar[0]) {\n      if(closingChar[1]){\n        if(xmlData[index + 1] === closingChar[1]){\n          return {\n            data: tagExp,\n            index: index\n          }\n        }\n      }else{\n        return {\n          data: tagExp,\n          index: index\n        }\n      }\n    } else if (ch === '\\t') {\n      ch = \" \"\n    }\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg){\n  const closingIndex = xmlData.indexOf(str, i);\n  if(closingIndex === -1){\n    throw new Error(errMsg)\n  }else{\n    return closingIndex + str.length - 1;\n  }\n}\n\nfunction readTagExp(xmlData,i, removeNSPrefix, closingChar = \">\"){\n  const result = tagExpWithClosingIndex(xmlData, i+1, closingChar);\n  if(!result) return;\n  let tagExp = result.data;\n  const closeIndex = result.index;\n  const separatorIndex = tagExp.search(/\\s/);\n  let tagName = tagExp;\n  let attrExpPresent = true;\n  if(separatorIndex !== -1){//separate tag name and attributes expression\n    tagName = tagExp.substring(0, separatorIndex);\n    tagExp = tagExp.substring(separatorIndex + 1).trimStart();\n  }\n\n  const rawTagName = tagName;\n  if(removeNSPrefix){\n    const colonIndex = tagName.indexOf(\":\");\n    if(colonIndex !== -1){\n      tagName = tagName.substr(colonIndex+1);\n      attrExpPresent = tagName !== result.data.substr(colonIndex + 1);\n    }\n  }\n\n  return {\n    tagName: tagName,\n    tagExp: tagExp,\n    closeIndex: closeIndex,\n    attrExpPresent: attrExpPresent,\n    rawTagName: rawTagName,\n  }\n}\n/**\n * find paired tag for a stop node\n * @param {string} xmlData \n * @param {string} tagName \n * @param {number} i \n */\nfunction readStopNodeData(xmlData, tagName, i){\n  const startIndex = i;\n  // Starting at 1 since we already have an open tag\n  let openTagCount = 1;\n\n  for (; i < xmlData.length; i++) {\n    if( xmlData[i] === \"<\"){ \n      if (xmlData[i+1] === \"/\") {//close tag\n          const closeIndex = findClosingIndex(xmlData, \">\", i, `${tagName} is not closed`);\n          let closeTagName = xmlData.substring(i+2,closeIndex).trim();\n          if(closeTagName === tagName){\n            openTagCount--;\n            if (openTagCount === 0) {\n              return {\n                tagContent: xmlData.substring(startIndex, i),\n                i : closeIndex\n              }\n            }\n          }\n          i=closeIndex;\n        } else if(xmlData[i+1] === '?') { \n          const closeIndex = findClosingIndex(xmlData, \"?>\", i+1, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 3) === '!--') { \n          const closeIndex = findClosingIndex(xmlData, \"-->\", i+3, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 2) === '![') { \n          const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"StopNode is not closed.\") - 2;\n          i=closeIndex;\n        } else {\n          const tagData = readTagExp(xmlData, i, '>')\n\n          if (tagData) {\n            const openTagName = tagData && tagData.tagName;\n            if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length-1] !== \"/\") {\n              openTagCount++;\n            }\n            i=tagData.closeIndex;\n          }\n        }\n      }\n  }//end for loop\n}\n\nfunction parseValue(val, shouldParse, options) {\n  if (shouldParse && typeof val === 'string') {\n    //console.log(options)\n    const newval = val.trim();\n    if(newval === 'true' ) return true;\n    else if(newval === 'false' ) return false;\n    else return toNumber(val, options);\n  } else {\n    if (isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\n","'use strict';\n\nimport XmlNode from './xmlNode.js';\n\nconst METADATA_SYMBOL = XmlNode.getMetaDataSymbol();\n\n/**\n * \n * @param {array} node \n * @param {any} options \n * @returns \n */\nexport default function prettify(node, options){\n  return compress( node, options);\n}\n\n/**\n * \n * @param {array} arr \n * @param {object} options \n * @param {string} jPath \n * @returns object\n */\nfunction compress(arr, options, jPath){\n  let text;\n  const compressedObj = {};\n  for (let i = 0; i < arr.length; i++) {\n    const tagObj = arr[i];\n    const property = propName(tagObj);\n    let newJpath = \"\";\n    if(jPath === undefined) newJpath = property;\n    else newJpath = jPath + \".\" + property;\n\n    if(property === options.textNodeName){\n      if(text === undefined) text = tagObj[property];\n      else text += \"\" + tagObj[property];\n    }else if(property === undefined){\n      continue;\n    }else if(tagObj[property]){\n      \n      let val = compress(tagObj[property], options, newJpath);\n      const isLeaf = isLeafTag(val, options);\n      if (tagObj[METADATA_SYMBOL] !== undefined) {\n        val[METADATA_SYMBOL] = tagObj[METADATA_SYMBOL]; // copy over metadata\n      }\n\n      if(tagObj[\":@\"]){\n        assignAttributes( val, tagObj[\":@\"], newJpath, options);\n      }else if(Object.keys(val).length === 1 && val[options.textNodeName] !== undefined && !options.alwaysCreateTextNode){\n        val = val[options.textNodeName];\n      }else if(Object.keys(val).length === 0){\n        if(options.alwaysCreateTextNode) val[options.textNodeName] = \"\";\n        else val = \"\";\n      }\n\n      if(compressedObj[property] !== undefined && compressedObj.hasOwnProperty(property)) {\n        if(!Array.isArray(compressedObj[property])) {\n            compressedObj[property] = [ compressedObj[property] ];\n        }\n        compressedObj[property].push(val);\n      }else{\n        //TODO: if a node is not an array, then check if it should be an array\n        //also determine if it is a leaf node\n        if (options.isArray(property, newJpath, isLeaf )) {\n          compressedObj[property] = [val];\n        }else{\n          compressedObj[property] = val;\n        }\n      }\n    }\n    \n  }\n  // if(text && text.length > 0) compressedObj[options.textNodeName] = text;\n  if(typeof text === \"string\"){\n    if(text.length > 0) compressedObj[options.textNodeName] = text;\n  }else if(text !== undefined) compressedObj[options.textNodeName] = text;\n  return compressedObj;\n}\n\nfunction propName(obj){\n  const keys = Object.keys(obj);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if(key !== \":@\") return key;\n  }\n}\n\nfunction assignAttributes(obj, attrMap, jpath, options){\n  if (attrMap) {\n    const keys = Object.keys(attrMap);\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      const atrrName = keys[i];\n      if (options.isArray(atrrName, jpath + \".\" + atrrName, true, true)) {\n        obj[atrrName] = [ attrMap[atrrName] ];\n      } else {\n        obj[atrrName] = attrMap[atrrName];\n      }\n    }\n  }\n}\n\nfunction isLeafTag(obj, options){\n  const { textNodeName } = options;\n  const propCount = Object.keys(obj).length;\n  \n  if (propCount === 0) {\n    return true;\n  }\n\n  if (\n    propCount === 1 &&\n    (obj[textNodeName] || typeof obj[textNodeName] === \"boolean\" || obj[textNodeName] === 0)\n  ) {\n    return true;\n  }\n\n  return false;\n}\n","import { buildOptions} from './OptionsBuilder.js';\nimport OrderedObjParser from './OrderedObjParser.js';\nimport prettify from './node2json.js';\nimport {validate} from \"../validator.js\";\nimport XmlNode from './xmlNode.js';\n\nexport default class XMLParser{\n    \n    constructor(options){\n        this.externalEntities = {};\n        this.options = buildOptions(options);\n        \n    }\n    /**\n     * Parse XML dats to JS object \n     * @param {string|Buffer} xmlData \n     * @param {boolean|Object} validationOption \n     */\n    parse(xmlData,validationOption){\n        if(typeof xmlData === \"string\"){\n        }else if( xmlData.toString){\n            xmlData = xmlData.toString();\n        }else{\n            throw new Error(\"XML data is accepted in String or Bytes[] form.\")\n        }\n        if( validationOption){\n            if(validationOption === true) validationOption = {}; //validate with default options\n            \n            const result = validate(xmlData, validationOption);\n            if (result !== true) {\n              throw Error( `${result.err.msg}:${result.err.line}:${result.err.col}` )\n            }\n          }\n        const orderedObjParser = new OrderedObjParser(this.options);\n        orderedObjParser.addExternalEntities(this.externalEntities);\n        const orderedResult = orderedObjParser.parseXml(xmlData);\n        if(this.options.preserveOrder || orderedResult === undefined) return orderedResult;\n        else return prettify(orderedResult, this.options);\n    }\n\n    /**\n     * Add Entity which is not by default supported by this library\n     * @param {string} key \n     * @param {string} value \n     */\n    addEntity(key, value){\n        if(value.indexOf(\"&\") !== -1){\n            throw new Error(\"Entity value can't have '&'\")\n        }else if(key.indexOf(\"&\") !== -1 || key.indexOf(\";\") !== -1){\n            throw new Error(\"An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'\")\n        }else if(value === \"&\"){\n            throw new Error(\"An entity with value '&' is not permitted\");\n        }else{\n            this.externalEntities[key] = value;\n        }\n    }\n\n    /**\n     * Returns a Symbol that can be used to access the metadata\n     * property on a node.\n     * \n     * If Symbol is not available in the environment, an ordinary property is used\n     * and the name of the property is here returned.\n     * \n     * The XMLMetaData property is only present when `captureMetaData`\n     * is true in the options.\n     */\n    static getMetaDataSymbol() {\n        return XmlNode.getMetaDataSymbol();\n    }\n}\n","import { unzip } from \"unzipit\";\nimport { X2jOptions, XMLParser, XMLBuilder, XmlBuilderOptions } from \"fast-xml-parser\";\nimport { forEachValueRecursive, hashFnv32a, isObject, removePrefix, to_snake_case } from \"./bs_helpers\";\nimport { rootToJson, getDataObject, arrayKeys } from \"./bs_main\";\nimport type { BSICatalogue, BSIGameSystem } from \"./bs_types\";\nimport type { Catalogue } from \"./bs_main_catalogue\";\nimport { entries } from \"./entries\";\n\n\nexport const containerTags = {} as Record<string, string | undefined>;\nfor (const key in entries) {\n  const cur = entries[key as keyof typeof entries]\n  if (cur.type) {\n    containerTags[key] = cur.type\n  }\n}\nexport const textNodeTags = new Set([\"description\", \"readme\", \"comment\"]);\nexport const textArrayTags = new Set([\"alias\"]);\nexport const allowEmptyStringKeys = new Set([\"join\"])\n\nconst escapedHtml = /&(?:amp|lt|gt|quot|#39|apos);/g;\nconst htmlUnescapes = {\n  \"&amp;\": \"&\",\n  \"&apos;\": \"'\",\n  \"&lt;\": \"<\",\n  \"&gt;\": \">\",\n  \"&quot;\": '\"',\n  \"&#39;\": \"'\",\n} as Record<string, string | undefined>;\n\nconst unescape = (string: string) =>\n  escapedHtml.test(string) ? string.replace(escapedHtml, (match) => htmlUnescapes[match]!) : string;\n\nconst containers = {} as Record<string, string>;\nfor (const key in containerTags) {\n  containers[containerTags[key]!] = key;\n}\nconst allowed = {} as Record<string, Set<string> | string>;\nfor (const [key, value] of Object.entries(entries)) {\n  if (typeof value.allowedChildrens === \"string\") {\n    allowed[key] = value.allowedChildrens;\n  } else {\n    allowed[key] = new Set(value.allowedChildrens);\n  }\n}\nfunction parseValue(str: string): any {\n  switch (str) {\n    case \"true\":\n      return true;\n    case \"false\":\n      return false;\n    default:\n      //@ts-ignore\n      if (isNaN(str)) {\n        return str;\n      }\n\n      const float = parseFloat(str);\n      if (isFinite(float) && str.includes(\"+\") == false) return float;\n\n      return str;\n  }\n}\nexport function xmlToJson(data: string) {\n  const options: Partial<X2jOptions> = {\n    allowBooleanAttributes: true,\n    ignoreAttributes: false,\n    attributeNamePrefix: \"\",\n    textNodeName: \"$text\",\n    processEntities: false,\n    parseTagValue: false,\n    ignoreDeclaration: true,\n    alwaysCreateTextNode: false,\n    trimValues: false,\n    isArray: (tagName: string, jPath: string, isLeafNode: boolean, isAttribute: boolean) => {\n      return !isAttribute && (tagName in containers || textArrayTags.has(tagName));\n    },\n    attributeValueProcessor: (name: string, val: string) => {\n      return parseValue(unescape(val));\n    },\n    tagValueProcessor: (name: string, val: string) => {\n      return unescape(val).trim();\n    },\n  };\n  const result = new XMLParser(options).parse(data);\n  return result;\n}\n\nexport async function unzipFolder(file: string | ArrayBuffer | Blob, path: string) {\n  const unzipped = await unzip(file);\n  const result = {} as Record<string, ArrayBuffer | string>;\n\n  for (const entry in unzipped.entries) {\n    const value = unzipped.entries[entry];\n    if (value.isDirectory) {\n      // folder\n      continue;\n    }\n    const file = removePrefix(removePrefix(entry, path), \"/\");\n    if (file.startsWith(\".\")) {\n      // git file\n      continue;\n    }\n    const data = isZipExtension(file) ? await value.arrayBuffer() : await value.text();\n    result[file] = data;\n  }\n  return result;\n}\n\nexport async function unzipFile(file: string | ArrayBuffer | Blob): Promise<string> {\n  if (typeof file === \"string\") {\n    var enc = new TextEncoder();\n    file = enc.encode(file);\n  }\n  const unzipped = await unzip(file);\n  for (const entry of Object.values(unzipped.entries)) {\n    const data = await entry.text();\n    return data;\n  }\n  throw \"unzipFile failed: No Entries\";\n}\n\nconst zipExtensions = [\"gstz\", \"zip\", \"catz\"];\nconst allowedExtensions = [\"gst\", \"gstz\", \"cat\", \"catz\", \"json\"];\nexport function removeExtension(extension_or_file: string) {\n  const idx = extension_or_file.lastIndexOf(\".\");\n  if (idx === -1) return extension_or_file;\n  return extension_or_file.substring(0, idx);\n}\nexport function getExtension(extension_or_file: string) {\n  const extension = extension_or_file.split(\".\").pop()!.toLowerCase();\n  return extension;\n}\nexport function isZipExtension(extension_or_file: string) {\n  const extension = getExtension(extension_or_file);\n  return zipExtensions.includes(extension);\n}\nexport function isAllowedExtension(file: string) {\n  const fileExtension = getExtension(file);\n  if (!allowedExtensions.includes(fileExtension)) {\n    return false;\n  }\n  return true;\n}\nconst oldBuggedTypes = {\n  sharedRules: \"sharedRule\",\n  sharedProfiles: \"sharedProfile\",\n  sharedInfoGroups: \"sharedInfoGroup\",\n  sharedSelectionEntries: \"sharedSelectionEntry\",\n  sharedSelectionEntryGroups: \"sharedSelectionEntryGroup\",\n} as Record<string, string>;\n/**\n * Converts a {profiles: [{profile: {}}]} to {profiles: [{}]}\n * From https://github.com/BlueWinds/bsd-schema/blob/main/index.js\n */\n\nexport function normalize(x: any) {\n  for (let attr in x) {\n    if (x[attr] === \"\" && !allowEmptyStringKeys.has(attr)) {\n      delete x[attr];\n    } else if (containerTags[attr] && x[attr]) {\n      if (attr in oldBuggedTypes) {\n        const normal = x[attr][containerTags[attr] as string];\n        const old = x[attr][oldBuggedTypes[attr]];\n        x[attr] = [...(Array.isArray(normal) ? normal : []), ...(Array.isArray(old) ? old : [])];\n        x[attr]?.forEach(normalize);\n      } else {\n        const val = x[attr][containerTags[attr] as string];\n\n        // Remove empty arrays that become an incorrect element\n        if (Array.isArray(val)) {\n          x[attr] = val;\n          x[attr]?.forEach(normalize);\n        } else if (isObject(x[attr])) {\n          delete x[attr];\n        }\n      }\n    } else if (textNodeTags.has(attr) && typeof x[attr] === \"object\" && !Array.isArray(x[attr])) {\n      x[attr] = x[attr][\"$text\"] ?? \"\";\n    }\n  }\n  return x;\n}\nexport function is_allowed(x: any, parentKey: string, k: string) {\n  const lookedUp = allowed[k];\n  if (typeof lookedUp === \"string\") {\n    return x.target[lookedUp] === parentKey;\n  }\n  return lookedUp?.has(parentKey);\n}\nexport function clean(x: any, k: string) {\n  const lookedUp = allowed[k];\n  const allowedChilds = (typeof lookedUp === \"string\" ? allowed[x[lookedUp]] : lookedUp) as Set<string>;\n  for (let attr in x) {\n    if (attr in containerTags && Array.isArray(x[attr])) {\n      if (allowedChilds && !allowedChilds.has(attr)) {\n        delete x[attr];\n      } else {\n        x[attr].forEach((o: any) => clean(o, attr));\n      }\n    }\n  }\n}\nconst empty = new Set<string>();\nexport function allowed_children(obj: any, key: string): Set<string> {\n  let result = allowed[key];\n  if (typeof result === \"string\") {\n    const val = obj[result];\n    if (val) {\n      const new_key = toPlural(val);\n      if (typeof new_key !== \"string\" || new_key === result) {\n        return empty;\n      }\n      result = allowed[new_key];\n    }\n  }\n  if (!result) {\n    return empty;\n  }\n  return result as Set<string>;\n}\nexport function BSXmlToJson(data: string) {\n  const result = xmlToJson(data);\n  const key = Object.keys(result)[0]\n  const content = result[key]\n  normalize(content);\n  switch (key) {\n    case \"catalogue\":\n      result.playable = 1;\n      result.id = hashFnv32a(result.catalogue.id);\n      result.include = [1000];\n      result.name = content.name;\n      result.short = to_snake_case(content.name);\n      result.playable = !Boolean(content.library);\n      result.version = content.battleScribeVersion;\n      result.nrversion = content.revision;\n      break;\n    case \"gameSystem\":\n      result.playable = 0;\n      result.id = 1000;\n      result.name = content.name;\n      result.short = to_snake_case(content.name);\n      result.playable = !Boolean(content.library);\n      result.version = content.battleScribeVersion;\n      result.nrversion = content.revision;\n      break;\n    case \"roster\":\n      break;\n  }\n  return result;\n}\n\nexport async function convertToJson(data: any, extension: string) {\n  extension = getExtension(extension);\n  switch (extension) {\n    case \"xml\":\n    case \"cat\":\n    case \"gst\":\n      return BSXmlToJson(data);\n    case \"zip\":\n    case \"catz\":\n    case \"gstz\":\n      return BSXmlToJson(await unzipFile(data));\n    case \"json\":\n      return JSON.parse(data);\n    default:\n      throw new Error(\"Extension not supported \" + extension);\n  }\n}\n\nexport function toSingle(key: string) {\n  return containerTags[key];\n}\n\nexport function toPlural(key: string) {\n  return containers[key];\n}\nconst skipKeys = new Set([\"?xml\", \"$text\", \"_\"]);\nfunction renestChilds(obj: any) {\n  for (const [key, value] of Object.entries(obj)) {\n    if (textNodeTags.has(key) || textArrayTags.has(key)) {\n      obj[key] = Array.isArray(value) ? value : [value];\n    } else if (Array.isArray(value) && !skipKeys.has(key)) {\n      obj[key] = [{ [toSingle(key)!]: value }];\n    }\n  }\n}\nfunction putAttributesIn$(first: any) {\n  forEachValueRecursive(first, (current) => {\n    if (typeof current === \"object\") {\n      renestChilds(current);\n    }\n  });\n  forEachValueRecursive(first, (current) => {\n    if (typeof current === \"object\") {\n      for (const [key, value] of Object.entries(current)) {\n        if (Array.isArray(value)) continue;\n        if (skipKeys.has(key) || textNodeTags.has(key)) continue;\n        if (isObject(value)) continue;\n        current[`_${key}`] = value;\n        delete current[key];\n      }\n    }\n  });\n  return first;\n}\n\nexport function convertToXml(data: BSICatalogue | Catalogue | BSIGameSystem) {\n  const json = JSON.parse(rootToJson(data));\n  putAttributesIn$(json);\n  const options: XmlBuilderOptions = {\n    textNodeName: \"$text\",\n    format: true,\n    attributeNamePrefix: \"_\",\n    ignoreAttributes: false,\n    suppressBooleanAttributes: false,\n    suppressEmptyNode: true,\n  };\n  if (json.gameSystem) {\n    json.gameSystem._xmlns = \"http://www.battlescribe.net/schema/gameSystemSchema\";\n  }\n  if (json.catalogue) {\n    json.catalogue._xmlns = \"http://www.battlescribe.net/schema/catalogueSchema\";\n  }\n  const builder = new XMLBuilder(options);\n  const xml = builder.build(json);\n  return `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\\n` + xml;\n}\n"],"names":["nameStartChar","nameChar","nameRegexp","regexName","getAllMatches","string","regex","matches","match","allmatches","len","index","isName","isExist","v","defaultOptions","validate","xmlData","options","tags","tagFound","reachedRoot","i","readPI","tagStartPos","readCommentAndCDATA","closingTag","tagName","validateTagName","msg","getErrorObject","getLineNumberForPosition","result","readAttributeStr","attrStr","attrStrStart","isValid","validateAttributeString","otg","openPos","afterAmp","validateAmpersand","isWhiteSpace","t","char","start","tagname","angleBracketsCount","doubleQuote","singleQuote","startChar","tagClosed","validAttrStrRegxp","attrNames","getPositionFromMatch","attrName","validateAttrName","validateNumberAmpersand","re","count","code","message","lineNumber","lines","val","jPath","attrs","buildOptions","METADATA_SYMBOL","XmlNode","key","node","startIndex","readDocType","entities","hasBody","comment","exp","hasSeq","entityName","readEntityExp","readElementExp","readNotationExp","skipWhitespace","data","validateEntityName","entityValue","readIdentifierVal","notationName","identifierType","publicIdentifier","systemIdentifier","type","identifierVal","elementName","contentModel","seq","j","name","hexRegex","numRegex","consider","toNumber","str","trimmedStr","parse_int","resolveEnotation","sign","leadingZeros","numTrimmedByZeros","trimZeros","decimalAdjacentToLeadingZeros","num","parsedStr","n","eNotationRegx","notation","eChar","eAdjacentToLeadingZeros","numStr","base","getIgnoreAttributesFn","ignoreAttributes","pattern","OrderedObjParser","_","addExternalEntities","parseXml","parseTextData","resolveNameSpace","buildAttributesMap","isItStopNode","replaceEntitiesValue","readStopNodeData","saveTextToParentTag","addChild","externalEntities","entKeys","ent","dontTrim","hasAttributes","isLeafNode","escapeEntities","newval","parseValue","prefix","attrsRegx","oldVal","aName","newVal","attrCollection","xmlObj","xmlNode","currentNode","textData","closeIndex","findClosingIndex","colonIndex","lastTagName","propIndex","tagData","readTagExp","childNode","endIndex","tagExp","rawTagName","attrExpPresent","lastTag","tagContent","entity","stopNodes","currentTagName","allNodesExp","stopNodePath","stopNodeExp","tagExpWithClosingIndex","closingChar","attrBoundary","ch","errMsg","closingIndex","removeNSPrefix","separatorIndex","openTagCount","shouldParse","prettify","compress","arr","text","compressedObj","tagObj","property","propName","newJpath","isLeaf","isLeafTag","assignAttributes","obj","keys","attrMap","jpath","atrrName","textNodeName","propCount","XMLParser","validationOption","orderedObjParser","orderedResult","value","containerTags","entries","cur","textNodeTags","textArrayTags","allowEmptyStringKeys","escapedHtml","htmlUnescapes","unescape","containers","float","xmlToJson","isAttribute","unzipFile","file","enc","unzipped","unzip","entry","allowedExtensions","getExtension","extension_or_file","isAllowedExtension","fileExtension","oldBuggedTypes","normalize","x","attr","normal","old","isObject","BSXmlToJson","content","hashFnv32a","to_snake_case","convertToJson","extension"],"mappings":"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"}