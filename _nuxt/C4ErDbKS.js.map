{"version":3,"file":"C4ErDbKS.js","sources":["../../../../../../../assets/shared/battlescribe/entries.ts","../../../../../../../assets/shared/battlescribe/bs_main.ts"],"sourcesContent":["export const entries = {\n  catalogueLinks: {\n    type: \"catalogueLink\"\n  },\n  publications: {\n    type: \"publication\"\n  },\n  costs: {\n    type: \"cost\",\n  },\n  costTypes: {\n    allowedChildrens: [\"modifiers\"],\n    type: \"costType\"\n  },\n  costLimits: {\n    type: \"costLimit\"\n  },\n  profileTypes: {\n    allowedChildrens: [\"characteristicTypes\", \"attributeTypes\"],\n    type: \"profileType\"\n  },\n  characteristicTypes: {\n    type: \"characteristicType\"\n  },\n  characteristics: {\n    type: \"characteristic\"\n  },\n  attributeTypes: {\n    type: \"attributeType\"\n  },\n  attributes: {\n    type: \"attribute\"\n  },\n  categoryEntries: {\n    allowedChildrens: [\"profiles\", \"rules\", \"infoGroups\", \"infoLinks\", \"constraints\", \"modifiers\", \"modifierGroups\"],\n    type: \"categoryEntry\"\n  },\n  categoryLinks: {\n    allowedChildrens: [\"profiles\", \"rules\", \"infoGroups\", \"infoLinks\", \"constraints\", \"modifiers\", \"modifierGroups\"],\n    type: \"categoryLink\"\n  },\n  categories: {\n    type: \"category\"\n  },\n  forceEntries: {\n    allowedChildrens: [\n      \"forceEntries\",\n      \"categoryLinks\",\n      \"profiles\",\n      \"rules\",\n      \"infoGroups\",\n      \"infoLinks\",\n      \"constraints\",\n      \"modifiers\",\n      \"modifierGroups\",\n      \"costs\",\n    ],\n    type: \"forceEntry\"\n  },\n  forces: {\n    type: \"force\"\n  },\n  selections: {\n    type: \"selection\"\n  },\n  entryLinks: {\n    allowedChildrens: \"type\",\n    type: \"entryLink\"\n  },\n  selectionEntryGroups: {\n    allowedChildrens: [\n      \"selectionEntries\",\n      \"selectionEntryGroups\",\n      \"entryLinks\",\n      \"profiles\",\n      \"rules\",\n      \"infoGroups\",\n      \"infoLinks\",\n      \"constraints\",\n      \"modifiers\",\n      \"modifierGroups\",\n      \"categoryLinks\",\n      \"costs\",\n    ],\n    type: \"selectionEntryGroup\"\n  },\n  sharedSelectionEntryGroups: {\n    allowedChildrens: [\n      \"selectionEntries\",\n      \"selectionEntryGroups\",\n      \"entryLinks\",\n      \"profiles\",\n      \"rules\",\n      \"infoGroups\",\n      \"infoLinks\",\n      \"constraints\",\n      \"modifiers\",\n      \"modifierGroups\",\n      \"categoryLinks\",\n      \"costs\",\n    ],\n    type: \"selectionEntryGroup\"\n  },\n  selectionEntries: {\n    allowedChildrens: [\n      \"selectionEntries\",\n      \"selectionEntryGroups\",\n      \"entryLinks\",\n      \"profiles\",\n      \"rules\",\n      \"infoGroups\",\n      \"infoLinks\",\n      \"associations\",\n      \"constraints\",\n      \"modifiers\",\n      \"modifierGroups\",\n      \"categoryLinks\",\n      \"costs\",\n    ],\n    type: \"selectionEntry\"\n  },\n  sharedSelectionEntries: {\n    allowedChildrens: [\n      \"selectionEntries\",\n      \"selectionEntryGroups\",\n      \"entryLinks\",\n      \"profiles\",\n      \"rules\",\n      \"infoGroups\",\n      \"infoLinks\",\n      \"associations\",\n      \"constraints\",\n      \"modifiers\",\n      \"modifierGroups\",\n      \"categoryLinks\",\n      \"costs\",\n    ],\n    type: \"selectionEntry\"\n  },\n  associations: {\n    type: \"association\"\n  },\n  sharedRules: {\n    allowedChildrens: [\"modifiers\", \"modifierGroups\"],\n    type: \"rule\"\n  },\n  rules: {\n    allowedChildrens: [\"modifiers\", \"modifierGroups\"],\n    type: \"rule\"\n  },\n  profiles: {\n    allowedChildrens: [\"modifiers\", \"modifierGroups\", \"characteristics\", \"attributes\"],\n    type: \"profile\"\n  },\n  sharedProfiles: {\n    allowedChildrens: [\"modifiers\", \"modifierGroups\", \"characteristics\", \"attributes\"],\n    type: \"profile\"\n  },\n  infoGroups: {\n    allowedChildrens: [\"profiles\", \"rules\", \"infoGroups\", \"infoLinks\", \"modifiers\", \"modifierGroups\"],\n    type: \"infoGroup\"\n  },\n  sharedInfoGroups: {\n    allowedChildrens: [\"profiles\", \"rules\", \"infoGroups\", \"infoLinks\", \"modifiers\", \"modifierGroups\"],\n    type: \"infoGroup\"\n  },\n  infoLinks: {\n    allowedChildrens: \"type\", //get from type\n    type: \"infoLink\"\n  },\n  modifiers: {\n    allowedChildrens: [\"conditions\", \"conditionGroups\", \"localConditionGroups\", \"repeats\"],\n    type: \"modifier\"\n  },\n  modifierGroups: {\n    allowedChildrens: [\"modifiers\", \"modifierGroups\", \"conditions\", \"conditionGroups\", \"localConditionGroups\", \"repeats\"],\n    type: \"modifierGroup\"\n  },\n  repeats: {\n    allowedChildrens: [],\n    type: \"repeat\"\n  },\n  conditions: {\n    allowedChildrens: [],\n    type: \"condition\"\n  },\n  constraints: {\n    allowedChildrens: [],\n    type: \"constraint\"\n  },\n  conditionGroups: {\n    allowedChildrens: [\"conditions\", \"conditionGroups\", \"localConditionGroups\"],\n    type: \"conditionGroup\"\n  },\n  localConditionGroups: {\n    allowedChildrens: [\"conditions\", \"conditionGroups\"],\n    type: \"localConditionGroup\"\n  },\n  catalogue: {\n    allowedChildrens: [\n      \"catalogueLinks\",\n      \"publications\",\n      \"costTypes\",\n      \"profileTypes\",\n      \"categoryEntries\",\n      \"forceEntries\",\n      \"sharedSelectionEntries\",\n      \"sharedSelectionEntryGroups\",\n      \"sharedProfiles\",\n      \"sharedRules\",\n      \"sharedInfoGroups\",\n      \"selectionEntries\",\n      \"entryLinks\",\n      \"infoLinks\",\n      \"infoGroups\",\n      \"rules\",\n    ],\n  },\n\n  gameSystem: {\n    allowedChildrens: [\n      \"publications\",\n      \"costTypes\",\n      \"profileTypes\",\n      \"categoryEntries\",\n      \"forceEntries\",\n      \"sharedSelectionEntries\",\n      \"sharedSelectionEntryGroups\",\n      \"sharedProfiles\",\n      \"sharedRules\",\n      \"sharedInfoGroups\",\n      \"selectionEntries\",\n      \"entryLinks\",\n      \"infoLinks\",\n      \"infoGroups\",\n      \"rules\",\n    ],\n  },\n} as const;\n\n\nexport const types = {\n  selectionEntry: { label: \"Entry\" },\n  selectionEntryGroup: { label: \"Group\" },\n  selectionEntryLink: { label: \"Entry (link)\" },\n  selectionEntryGroupLink: { label: \"Group (link)\" },\n  entryLink: { label: \"Entry (link)\" },\n  forceEntry: { label: \"Force\" },\n  force: { label: \"Force\" },\n  selection: { label: \"Selection\" },\n  category: { label: \"Category\" },\n  categoryEntry: { label: \"Category\" },\n  categoryLink: { label: \"Category (link)\" },\n  catalogueLink: { label: \"Catalogue (link)\" },\n  publication: { label: \"Publication\" },\n  costType: { label: \"Cost Type\" },\n  cost: { label: \"Cost\" },\n  costLimit: { label: \"Cost Limit\" },\n  link: { label: \"Link\" },\n  profileType: { label: \"Profile Type\" },\n  profile: { label: \"Profile\" },\n  rule: { label: \"Rule\" },\n  infoLink: { label: \"Info (link)\" },\n  infoGroup: { label: \"Info Group\" },\n  profileLink: { label: \"Profile\" },\n  ruleLink: { label: \"Rule (link)\" },\n  infoGroupLink: { label: \"Info Group (link)\" },\n  characteristic: { label: \"Characteristic\" },\n  characteristicType: { label: \"Characteristic Type\" },\n  attribute: { label: \"Attribute\" },\n  attributeType: { label: \"Attribute Type\" },\n  constraint: { label: \"Constraint\" },\n  condition: { label: \"Condition\" },\n  modifier: { label: \"Modifier\" },\n  modifierGroup: { label: \"Modifier Group\" },\n  repeat: { label: \"Repeat\" },\n  conditionGroup: { label: \"Condition Group\" },\n  localConditionGroup: { label: \"Local Condition Group\" },\n  association: { label: \"Association\" },\n  catalogue: { label: \"Catalogue\" },\n  gameSystem: { label: \"Game System\" }\n}\n","import type {\n  BSIModifier,\n  BSIModifierGroup,\n  BSIConstraint,\n  BSIProfile,\n  BSIRule,\n  BSICost,\n  BSIPublication,\n  BSINamed,\n  BSIProfileType,\n  BSICatalogue,\n  BSICharacteristic,\n  BSICondition,\n  BSIConditionGroup,\n  BSIRepeat,\n  BSICharacteristicType,\n  BSIData,\n  BSIGameSystem,\n  NRAssociation,\n  AssociationConstraint,\n  BSIModifierType,\n  BSILocalConditionGroup,\n  BSIAttributeType,\n  BSIAttribute,\n} from \"./bs_types\";\nimport type { EditorBase, Catalogue } from \"./bs_main_catalogue\";\nimport { clone, isObject } from \"./bs_helpers\";\nimport { splitExactlyConstraints } from \"./exactly_constraints\";\nimport { splitExactlyConstraintsModifiers } from \"./exactly_constraints\";\nimport { entries } from \"./entries\";\nconst isNonEmptyIfHasOneOf = [\n  \"modifiers\",\n  \"modifierGroups\",\n  \"constraints\",\n\n  \"entryLinks\",\n  \"categoryLinks\",\n  \"selectionEntries\",\n  \"selectionEntryGroups\",\n\n  \"infoLinks\",\n  \"infoGroups\",\n  \"rules\",\n  \"profiles\",\n];\nexport interface BSModifierBase {\n  modifiers?: BSIModifier[];\n  modifierGroups?: BSIModifierGroup[];\n}\n\nexport const arrayKeys = new Set([...Object.keys(entries).filter((s) => s.endsWith(\"s\"))]);\nexport function getDataObject(data: BSIData | Catalogue): BSIGameSystem | BSICatalogue {\n  if ((data as Catalogue).isCatalogue && (data as Catalogue).isCatalogue()) {\n    return data as BSICatalogue;\n  }\n  if ((data as BSIData).gameSystem) return (data as BSIData).gameSystem!;\n  if ((data as BSIData).catalogue) return (data as BSIData).catalogue!;\n  throw Error(\"getDataObject data argument is not a valid system or catalogue\");\n}\n\nexport function getDataDbId(data: BSIData | Catalogue): string {\n  if ((data as Catalogue).isCatalogue && (data as Catalogue).isCatalogue()) {\n    if (data.id && data.gameSystemId) {\n      return `${data.gameSystemId}-${data.id}`;\n    }\n    if (data.id) {\n      return `${data.id}`;\n    }\n  }\n  if (data.catalogue) {\n    return `${data.catalogue.gameSystemId}-${data.catalogue.id}`;\n  }\n  if (data.gameSystem) {\n    return data.gameSystem.id;\n  }\n  throw Error(\"getDataId data argument is not a valid system or catalogue\");\n}\n/**\n * This is a base class with generic functions for all nodes in the BSData xml/json\n * Usage: Add it as a prototype on the json to use the functions with Object.setPrototypeOf\n */\nexport class Base implements BSModifierBase {\n  // Data\n  id!: string;\n  type?: string;\n  subType?: \"mount\" | \"crew\" | \"unit-group\";\n  shared?: boolean;\n  import?: boolean;\n  collective?: boolean;\n  comment?: string;\n  publicationId!: string;\n  typeName?: string;\n  typeId?: string;\n  categoryEntryId?: string; // Legacy categories\n\n  // Data - Modifiable\n  name!: string;\n  hidden!: boolean;\n  value?: number | string | boolean;\n  page?: string;\n  defaultAmount?: number | string;\n\n  profiles?: Profile[];\n  rules?: Rule[];\n  infoLinks?: InfoLink[];\n  infoGroups?: InfoGroup[];\n  publications?: BSIPublication[];\n  costs?: BSICost[];\n\n  // Childs\n  selectionEntries?: Entry[];\n  selectionEntryGroups?: Group[];\n  entryLinks?: Link[];\n  profileTypes?: ProfileType[];\n  categoryEntries?: Category[];\n  categoryLinks?: CategoryLink[];\n  forceEntries?: Force[];\n  sharedSelectionEntryGroups?: Group[];\n  sharedSelectionEntries?: Entry[];\n  sharedProfiles?: Profile[];\n  sharedRules?: Rule[];\n  sharedInfoGroups?: InfoGroup[];\n  target?: Base;\n\n  // Modifiers\n  modifiers?: BSIModifier[];\n  modifierGroups?: BSIModifierGroup[];\n  constraints?: BSIConstraint[];\n  // repeats?: BSIRepeat[];\n  conditions?: BSICondition[];\n  conditionGroups?: BSIConditionGroup[];\n  localConditionGroups?: BSILocalConditionGroup[];\n\n  // Processed (Catalogue)\n  catalogue!: Catalogue; // Parent Catalogue\n  extra_constraints?: BSIExtraConstraint[];\n  childs!: Base[];\n\n  // Processed (self)\n  loaded?: boolean;\n  collective_recursive?: boolean;\n  limited_to_one?: boolean;\n\n  // NR Only\n  associations?: NRAssociation[];\n  associationConstraints?: AssociationConstraint[];\n  flatten?: boolean;\n  collapsible?: boolean;\n  sortIndex?: number;\n  alias?: string[];\n  noindex?: boolean;\n\n  constructor(json: any) {\n    return Object.setPrototypeOf(json, Object.getPrototypeOf(this));\n  }\n  get url(): string {\n    return \"%{main_catalogue|catalogue}/%{id}/%{getName}\";\n  }\n\n  process() {\n    if (this.loaded) return;\n    this.collective_recursive = this.isCollectiveRecursive();\n    this.limited_to_one = !this.canAmountBeAbove1();\n    this.loaded = true;\n  }\n  toJson() {\n    return entryToJson(this);\n  }\n  getCatalogue() {\n    return this.catalogue;\n  }\n  getGameSystem() {\n    return this.getCatalogue().getGameSystem();\n  }\n  // Prevent Vue Observers\n  get [Symbol.toStringTag](): string {\n    // Anything can go here really as long as it's not 'Object'\n    return (globalThis as any).isEditor ? \"Object\" : \"ObjectNoObserve\";\n  }\n  isGroup(): this is Group | Link<Group> {\n    return false;\n  }\n  isForce(): this is Force {\n    return false;\n  }\n  isCatalogue(): this is Catalogue {\n    return false;\n  }\n  isLink(): this is Link {\n    return false;\n  }\n  isCategory(): this is Category | Link<Category> {\n    return false;\n  }\n  isRoster(): boolean {\n    return false;\n  }\n  isQuantifiable(): boolean {\n    return false;\n  }\n  isEntry(): this is Entry {\n    return false;\n  }\n  isIdUnique() {\n    return false;\n  }\n  isRule(): this is Rule | InfoLink<Rule> {\n    return false;\n  }\n  isProfile(): this is Profile | InfoLink<Profile> {\n    return false;\n  }\n  isInfoGroup(): this is InfoGroup | InfoLink<InfoGroup> {\n    return false;\n  }\n  isUnit(): boolean {\n    for (const categoryLink of this.categoryLinks || []) {\n      if (categoryLink.primary) return true;\n    }\n    return false;\n  }\n  getId(): string {\n    return this.id;\n  }\n  getType(): string | undefined {\n    return this.subType ?? this.type;\n  }\n  getTypeName(): string | undefined {\n    return this.typeName;\n  }\n  getCategoryEntryId(): string | undefined {\n    return this.categoryEntryId;\n  }\n  getHidden(): boolean | undefined {\n    return this.hidden;\n  }\n  getPage(): string | undefined {\n    return this.page;\n  }\n  getName(): string {\n    return this.name ?? \"\";\n  }\n  getDefaultAmount(): number | string | undefined {\n    return this.defaultAmount;\n  }\n  isCollective(): boolean | undefined {\n    return this.collective;\n  }\n  isCollapsible(): boolean | undefined {\n    return this.collapsible;\n  }\n  isCollectiveRecursive() {\n    const stack = [...this.selectionsIterator()];\n    while (stack.length) {\n      const current = stack.pop()!;\n      if (!current.isCollective() && !current.isGroup()) return false;\n      stack.push(...current.selectionsIterator());\n    }\n    return true;\n  }\n  isEmptyNode(): boolean {\n    for (const key of isNonEmptyIfHasOneOf) {\n      if ((this as any)[key] !== undefined) return false;\n    }\n    return true;\n  }\n  *forcesIterator(): Iterable<Force> {\n    return;\n  }\n  *associationsIterator(): Iterable<NRAssociation> {\n    if (this.associations) {\n      yield* this.associations;\n    }\n  }\n  *profilesIterator(): Iterable<Profile> {\n    for (const group of getAllInfoGroups(this)) {\n      if (group.profiles) {\n        yield* group.profiles;\n      }\n      if (group.infoLinks) {\n        yield* group.infoLinks?.filter((o) => o.type === \"profile\").map((o) => o.target as Profile);\n      }\n    }\n  }\n  *rulesIterator(): Iterable<Rule> {\n    for (const group of getAllInfoGroups(this)) {\n      if (group.rules) {\n        yield* group.rules;\n      }\n      if (group.infoLinks) {\n        yield* group.infoLinks?.filter((o) => o.type === \"rule\").map((o) => o.target as Rule);\n      }\n    }\n  }\n  *constraintsIterator(): Iterable<BSIConstraint> {\n    if (this.constraints) yield* this.constraints;\n  }\n  *extraConstraintsIterator(): Iterable<BSIExtraConstraint> {\n    if (this.extra_constraints) yield* this.extra_constraints;\n  }\n  *modifierGroupsIterator(): Iterable<BSIModifierGroup> {\n    if (this.modifierGroups) yield* this.modifierGroups;\n  }\n  *modifiersIterator(): Iterable<BSIModifier> {\n    if (this.modifiers) yield* this.modifiers;\n  }\n  *modifierGroupsIteratorRecursive(): Iterable<BSIModifierGroup> {\n    yield this;\n    if (this.isLink()) yield this.target;\n    for (const group of this.modifierGroupsIterator()) {\n      yield group;\n      yield* iterateModifierGroupsRecursive(group.modifierGroups);\n    }\n  }\n  *selectionsIterator(): Iterable<Base | Link> {\n    if (this.selectionEntries) yield* this.selectionEntries;\n    if (this.selectionEntryGroups) yield* this.selectionEntryGroups;\n    if (this.entryLinks) yield* this.entryLinks;\n  }\n  *localSelectionsIterator(): Iterable<Base | Link> {\n    if (this.selectionEntries) yield* this.selectionEntries;\n    if (this.selectionEntryGroups) yield* this.selectionEntryGroups;\n    if (this.entryLinks) yield* this.entryLinks;\n  }\n  *nodesIterator(): Iterable<Base | Link> {\n    if (this.isLink()) yield* this.target.nodesIterator();\n    if (this.selectionEntries) yield* this.selectionEntries;\n    if (this.selectionEntryGroups) yield* this.selectionEntryGroups;\n    if (this.entryLinks) yield* this.entryLinks;\n  }\n  *entriesIterator(): Iterable<Base | Link> {\n    if (this.isLink()) yield* this.target.entriesIterator();\n    if (this.selectionEntries) yield* this.selectionEntries;\n    if (this.selectionEntryGroups) yield* this.selectionEntryGroups;\n    if (this.entryLinks) yield* this.entryLinks;\n    if (this.childs) yield* this.childs;\n  }\n\n  *iterateSelectionEntries(): Iterable<Base> {\n    if (this.selectionEntries) yield* this.selectionEntries;\n    if (this.entryLinks) yield* this.entryLinks;\n    if (this.selectionEntryGroups) yield* this.selectionEntryGroups;\n  }\n\n  *iterateSelectionEntriesWithRoot(): Iterable<Base> {\n    if (this.selectionEntries) yield* this.selectionEntries;\n    if (this.entryLinks) yield* this.entryLinks;\n    if (this.selectionEntryGroups) yield* this.selectionEntryGroups;\n  }\n\n  *iterateRootEntries(): Iterable<Base> {\n    if (this.selectionEntries) yield* this.selectionEntries;\n    if (this.entryLinks) yield* this.entryLinks;\n    if (this.selectionEntryGroups) yield* this.selectionEntryGroups;\n    if (this.forceEntries) yield* this.forceEntries;\n  }\n\n  *iterateAllRootEntries(): Iterable<Base> {\n    if (this.selectionEntries) yield* this.selectionEntries;\n    if (this.entryLinks) yield* this.entryLinks;\n    if (this.selectionEntryGroups) yield* this.selectionEntryGroups;\n    if (this.forceEntries) yield* this.forceEntries;\n  }\n\n  *categoryLinksIterator(): Iterable<CategoryLink> {\n    if (this.categoryLinks) yield* this.categoryLinks;\n  }\n  *infoLinksIterator(): Iterable<InfoLink> {\n    if (this.infoLinks) yield* this.infoLinks;\n  }\n  *infoGroupsIterator(): Iterable<InfoGroup> {\n    if (this.infoGroups) yield* this.infoGroups;\n  }\n  *infoRulesIterator(): Iterable<Rule> {\n    if (this.rules) yield* this.rules;\n  }\n  *infoProfilesIterator(): Iterable<Profile> {\n    if (this.profiles) yield* this.profiles;\n  }\n\n  /**\n   *If callback returns something other than `undefined`, callback will not be called for the childs of this node\n   */\n  forEachCond(callbackfn: (value: Base | Link, depth: number) => any, _depth = 0): void {\n    if (callbackfn(this, 0) === undefined)\n      for (const instance of this.selectionsIterator()) instance.forEachCond(callbackfn, _depth + 1);\n  }\n  forEach(callbackfn: (value: Base | Link) => unknown): void {\n    callbackfn(this);\n    for (const instance of this.selectionsIterator()) instance.forEach(callbackfn);\n  }\n  forEachNode(callbackfn: (value: Base | Link) => unknown): void {\n    callbackfn(this);\n    for (const instance of this.nodesIterator()) instance.forEachNode(callbackfn);\n  }\n  forEachNodeCb(callbackfn: (value: Base | Link) => unknown): void {\n    const stack = [this as Base | Link];\n    const blacklist = new Set<string>();\n    while (stack.length) {\n      const cur = stack.pop()!;\n      if (blacklist.has(cur.id)) {\n        continue;\n      } else {\n        blacklist.add(cur.id);\n      }\n      callbackfn(cur);\n      if (cur.childs) {\n        stack.push(...cur.childs);\n        continue;\n      }\n\n      if (cur.target) {\n        const target = cur.target;\n\n        if (target.selectionEntries) stack.push(...target.selectionEntries);\n\n        if (target.selectionEntryGroups) stack.push(...target.selectionEntryGroups);\n\n        if (target.entryLinks) stack.push(...target.entryLinks);\n      }\n      if (cur.selectionEntries) stack.push(...cur.selectionEntries);\n\n      if (cur.selectionEntryGroups) stack.push(...cur.selectionEntryGroups);\n\n      if (cur.entryLinks) stack.push(...cur.entryLinks);\n    }\n  }\n\n  // console.log(\"foreachobjectwhitelist\", keys);\n\n  forEachObject<T extends Base>(\n    callbackfn: (value: T, parent: T) => unknown,\n    whiteList = arrayKeys,\n    maxDepth?: number\n  ) {\n    let stack = [this as any];\n    let next = [];\n    let depth = 0;\n    // const keys = {} as any;\n\n    while (stack.length) {\n      while (stack.length) {\n        const current = stack.pop()!;\n        for (const key in current) {\n          const value = current[key];\n          if (!whiteList.has(key)) {\n            // addOne(keys, key);\n            continue;\n          }\n          //  If Array: add each object inside array if (Array.isArray(value)) {\n\n          if (isObject(value)) {\n            if (Array.isArray(value)) {\n              if (value.length && isObject(value[0])) {\n                for (let i = 0; i < value.length; i++) {\n                  const cur = value[i];\n                  if (callbackfn(cur, current) !== false) {\n                    next.push(cur);\n                  }\n                }\n              }\n            } else {\n              if (callbackfn(value, current) !== false) {\n                next.push(value);\n              }\n            }\n          }\n        }\n      }\n      stack = next;\n      next = [];\n      depth++;\n      if (maxDepth && depth >= maxDepth) break;\n    }\n    // console.log(\"foreachobjectwhitelist\", keys);\n  }\n  forEachObjectWhitelist<T extends Base>(\n    callbackfn: (value: T, parent: T) => unknown,\n    whiteList = arrayKeys,\n    maxDepth?: number\n  ) {\n    return this.forEachObject(callbackfn, whiteList, maxDepth);\n  }\n  findOption(cb: (opt: Base | Link) => boolean): Base | Link | undefined {\n    for (const s of this.selectionsIterator()) {\n      if (cb(s)) return s;\n    }\n  }\n  findOptionRecursive(cb: (opt: Base | Link) => boolean): Base | Link | undefined {\n    const stack = [...this.selectionsIterator()];\n    while (stack.length) {\n      const current = stack.pop()!;\n      if (cb(current)) return current;\n    }\n  }\n  find_recursive(cb: (opt: Base) => boolean, includeTargets = false) {\n    let stack = [this as any];\n    let next = [];\n\n    while (stack.length) {\n      while (stack.length) {\n        const current = stack.pop()!;\n        for (const key in current) {\n          const value = current[key];\n          if (!arrayKeys.has(key)) continue;\n          if (isObject(value)) {\n            if (Array.isArray(value)) {\n              if (value.length && isObject(value[0])) {\n                for (let i = 0; i < value.length; i++) {\n                  const cur = value[i];\n                  const res = cb(cur);\n                  if (res) return cur;\n                  if (res !== false) {\n                    next.push(cur);\n                    if (cur.target && includeTargets) next.push(cur.target);\n                  }\n                }\n              }\n            } else {\n              const res = cb(value);\n              if (res) return value;\n              if (res !== false) {\n                next.push(value);\n                if (value.target && includeTargets) next.push(value.target);\n              }\n            }\n          }\n        }\n      }\n      stack = next;\n      next = [];\n    }\n  }\n  find(cb: (opt: Base) => boolean, includeTargets = false) {\n    let stack = [this as any];\n    let next = [];\n    let first = true;\n    while (stack.length) {\n      while (stack.length) {\n        const current = stack.pop()!;\n        for (const key in current) {\n          const value = current[key];\n          if (!arrayKeys.has(key)) continue;\n          if (isObject(value)) {\n            if (Array.isArray(value)) {\n              if (value.length && isObject(value[0])) {\n                for (let i = 0; i < value.length; i++) {\n                  const cur = value[i];\n                  if (cb(cur)) return cur;\n                  next.push(cur);\n                  if (cur.target && includeTargets) next.push(cur.target);\n                }\n              }\n            } else {\n              if (cb(value)) return value;\n              next.push(value);\n              if (value.target && includeTargets) next.push(value.target);\n            }\n          }\n        }\n      }\n      if (!first) return;\n      first = false;\n      stack = next;\n      next = [];\n    }\n  }\n  getCosts(): BSICost[] {\n    return this.costs || [];\n  }\n\n  getPrimaryCategory(): string {\n    for (const categoryLink of this.categoryLinks || []) {\n      if (categoryLink.primary) return categoryLink.targetId;\n    }\n    return this.getCategoryEntryId() ?? UNCATEGORIZED_ID;\n  }\n  getPrimaryCategoryLink(): CategoryLink | undefined {\n    for (const categoryLink of this.categoryLinks || []) {\n      if (categoryLink.primary) return categoryLink;\n    }\n  }\n  // Packs all of a constraint's modifiers with itself\n  getPackedConstraint(constraint: BSIConstraint): BSIExtraConstraint {\n    const result = Object.assign({}, constraint) as BSIExtraConstraint;\n    result.name = this.getName();\n    result.parent = this;\n    const useTarget = constraint.shared || this instanceof CategoryLink;\n    result.childId = this.isLink() && useTarget ? this.targetId : this.id;\n    result.modifiers = [];\n    for (const modifier of this.modifiersIterator()) {\n      if (\n        modifier.field === constraint.id ||\n        (modifier.field === \"hidden\" && constraint.type === \"min\" && !this.isCategory())\n      )\n        result.modifiers.push(modifier);\n    }\n    result.modifierGroups = [];\n    for (const group of this.modifierGroupsIterator()) {\n      current: for (const sub_grp of iterateModifierGroupsRecursive([group])) {\n        for (const modifier of sub_grp.modifiers || []) {\n          if (\n            modifier.field === constraint.id ||\n            (modifier.field === \"hidden\" && constraint.type === \"min\" && !this.isCategory())\n          ) {\n            result.modifierGroups.push(group);\n            break current;\n          }\n        }\n      }\n    }\n    return result;\n  }\n  // Modifies a constraints query to have the same effect when checked from a roster/force.\n  // packs modifiers & modifiers groups inside it\n  getBoundConstraint(constraint: BSIConstraint): BSIExtraConstraint {\n    const result = this.getPackedConstraint(constraint);\n    result.scope = \"self\";\n    return result;\n  }\n  getChildBoundConstraints(skipGroup?: boolean): BSIExtraConstraint[] {\n    const result = [];\n    for (const child of this.selectionsIterator()) {\n      if (skipGroup && child.isGroup()) continue;\n      for (const constraint of child.constraintsIterator()) {\n        if (constraint.type === \"min\" || constraint.type === \"exactly\") {\n          if (constraint.scope === \"parent\") result.push(child.getBoundConstraint(constraint));\n        }\n      }\n\n      if (child.isGroup()) result.push(...child.getChildBoundConstraints());\n    }\n    return result;\n  }\n  canAmountBeAbove1(): boolean {\n    const maxes = getTheoreticalMaxes(this.constraintsIterator(), [\n      ...this.modifierGroupsIterator(),\n      { modifiers: [...this.modifiersIterator()] },\n    ]);\n    if (!maxes.length || maxes.includes(-1)) return true;\n    return Math.min(...maxes) > 1;\n  }\n  hasOption(name: string) {\n    let found: undefined | true = undefined;\n    this.forEachCond((o) => {\n      if (o.getName() === name) found = true;\n      return found;\n    });\n    return found ? true : false;\n  }\n}\n\nexport class Entry extends Base {\n  isEntry(): this is Entry {\n    return true;\n  }\n  isQuantifiable(): boolean {\n    return true;\n  }\n  isIdUnique() {\n    return true;\n  }\n}\nexport class Group extends Base {\n  declare defaultSelectionEntryId?: string;\n  getDefaultSelectionEntryId() {\n    return this.defaultSelectionEntryId;\n  }\n  isGroup(): this is Group {\n    return true;\n  }\n  isIdUnique() {\n    return true;\n  }\n}\nexport class Link<T extends Base = Group | Entry> extends Base {\n  targetId!: string;\n  declare target: T;\n  isLink(): this is Link {\n    return true;\n  }\n  isGroup(): this is Link<Group> {\n    return this.target?.isGroup();\n  }\n  isCategory(): this is Link<Category> {\n    return this.target?.isCategory();\n  }\n  isQuantifiable(): boolean {\n    return this.target?.isQuantifiable();\n  }\n  isEntry(): this is Entry {\n    return this.target?.isEntry();\n  }\n  isIdUnique() {\n    return false;\n  }\n  isProfile(): this is Profile | InfoLink<Profile> {\n    return this.target?.isProfile() || false;\n  }\n  isRule(): this is Rule | InfoLink<Rule> {\n    return this.target?.isRule() || false;\n  }\n  isInfoGroup(): this is InfoGroup | InfoLink<InfoGroup> {\n    return this.target?.isInfoGroup() || false;\n  }\n  isUnit(): boolean {\n    if (this.target.isUnit()) return true;\n    for (const categoryLink of this.categoryLinks || []) {\n      if (categoryLink.primary) return true;\n    }\n    return false;\n  }\n  isCollapsible(): boolean | undefined {\n    return this.collapsible || this.target.collapsible;\n  }\n  getId(): string {\n    return this.targetId;\n  }\n  getType(): string | undefined {\n    return this.target?.getType();\n  }\n  getPage(): string | undefined {\n    return this.page || this.target?.page;\n  }\n  getHidden(): boolean | undefined {\n    return this.target.hidden || this.hidden;\n  }\n  getDefaultSelectionEntryId() {\n    return (\n      (this as any as Group).defaultSelectionEntryId || (this.target as any as Group)?.getDefaultSelectionEntryId()\n    );\n  }\n  getCategoryEntryId(): string | undefined {\n    return this.categoryEntryId ?? this.target?.categoryEntryId;\n  }\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore: TS2611\n  get associationConstraints(): AssociationConstraint[] | undefined {\n    return this.target.associationConstraints;\n  }\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore: TS2611\n  getAssociations(): NRAssociation[] | undefined {\n    return this.associations || this.target.associations;\n  }\n\n  isCollective(): boolean | undefined {\n    return super.isCollective() || this.target?.isCollective();\n  }\n  *extraConstraintsIterator(): Iterable<BSIExtraConstraint> {\n    yield* this.target.extraConstraintsIterator();\n    yield* super.extraConstraintsIterator();\n  }\n  *associationsIterator(): Iterable<NRAssociation> {\n    yield* this.target.associationsIterator();\n    yield* super.associationsIterator();\n  }\n  *rulesIterator(): Iterable<Rule> {\n    yield* this.target.rulesIterator();\n    yield* super.rulesIterator();\n  }\n  *profilesIterator(): Iterable<Profile> {\n    yield* this.target.profilesIterator();\n    yield* super.profilesIterator();\n  }\n  *constraintsIterator(): Iterable<BSIConstraint> {\n    if (this.target) yield* this.target.constraintsIterator();\n    yield* super.constraintsIterator();\n  }\n  *modifierGroupsIterator(): Iterable<BSIModifierGroup> {\n    yield* this.target.modifierGroupsIterator();\n    yield* super.modifierGroupsIterator();\n  }\n  *modifiersIterator(): Iterable<BSIModifier> {\n    yield* this.target.modifiersIterator();\n    yield* super.modifiersIterator();\n  }\n  *selectionsIterator(): Iterable<Base | Link> {\n    yield* this.target.selectionsIterator();\n    yield* super.selectionsIterator();\n  }\n  *categoryLinksIterator(): Iterable<CategoryLink> {\n    yield* this.target.categoryLinksIterator();\n    yield* super.categoryLinksIterator();\n  }\n  *infoLinksIterator(): Iterable<InfoLink> {\n    yield* this.target.infoLinksIterator();\n    yield* super.infoLinksIterator();\n  }\n  *infoGroupsIterator(): Iterable<InfoGroup> {\n    yield* this.target.infoGroupsIterator();\n    yield* super.infoGroupsIterator();\n  }\n  *infoRulesIterator(): Iterable<Rule> {\n    yield* this.target.infoRulesIterator();\n    yield* super.infoRulesIterator();\n  }\n  *infoProfilesIterator(): Iterable<Profile> {\n    yield* this.target.infoProfilesIterator();\n    yield* super.infoProfilesIterator();\n  }\n  getDefaultAmount(): number | string | undefined {\n    if (this.defaultAmount === \"\" || this.defaultAmount === undefined) {\n      return this.target.getDefaultAmount();\n    }\n    return this.defaultAmount;\n  }\n  getName(): string {\n    return this.target?.name ?? this.name ?? \"\";\n  }\n  getPrimaryCategory(): string {\n    for (const categoryLink of this.categoryLinks || []) {\n      if (categoryLink.primary) return categoryLink.targetId;\n    }\n    for (const categoryLink of this.target?.categoryLinks || []) {\n      if (categoryLink.primary) return categoryLink.targetId;\n    }\n    return this.getCategoryEntryId() ?? UNCATEGORIZED_ID;\n  }\n  getPrimaryCategoryLink(): CategoryLink | undefined {\n    for (const categoryLink of this.categoryLinks || []) {\n      if (categoryLink.primary) return categoryLink;\n    }\n    for (const categoryLink of this.target?.categoryLinks || []) {\n      if (categoryLink.primary) return categoryLink;\n    }\n  }\n  getCosts(): BSICost[] {\n    const d = {} as Record<string, BSICost>;\n    if (this.target?.costs) {\n      for (const cost of this.target.costs) d[cost.typeId] = cost;\n    }\n    if (this.costs) {\n      for (const cost of this.costs) d[cost.typeId] = cost;\n    }\n    return Object.values(d);\n  }\n}\n(Link.prototype as any).keyInfoCache = {};\n\nexport class InfoLink<T extends Rule | InfoGroup | Profile = Rule | InfoGroup | Profile> extends Link {\n  declare target: T;\n  declare type: \"infoGroup\" | \"profile\" | \"rule\";\n  getTypeName() {\n    return (this.target as Profile)?.typeName;\n  }\n  getTypeId() {\n    return (this.target as Profile)?.typeId;\n  }\n}\nexport class CategoryLink extends Link {\n  declare targetId: string;\n  declare target: Category;\n  primary?: boolean;\n  main_catalogue!: Catalogue;\n\n  get units() {\n    return this.target.units;\n  }\n  *selectionsIterator(): Iterable<Base> {\n    yield* this.target.units;\n  }\n  isEmpty(): boolean {\n    return this.target.isEmpty();\n  }\n}\n\nexport const UNCATEGORIZED_ID = \"(No Category)\";\nexport const ILLEGAL_ID = \"(Illegal Units)\";\nexport class Category extends Base {\n  declare id: string;\n  units!: Array<Base | Link>;\n  main_catalogue!: Catalogue;\n\n  description?: string;\n  isCategory(): this is Category {\n    return true;\n  }\n  isEmpty(): boolean {\n    return !Boolean(this.units.length);\n  }\n  isIdUnique() {\n    return !this.isEmptyNode();\n  }\n\n  getDescription(): string {\n    return Array.isArray(this.description) ? this.description.join(\"\\n\") : this.description || \"\";\n  }\n\n  *selectionsIterator(): Iterable<Base> {\n    yield* this.units;\n  }\n}\nexport class Force extends Base {\n  declare name: string;\n  declare id: string;\n  childForcesLabel?: string;\n  categories!: Array<Category | CategoryLink>;\n  forces?: Force[];\n  main_catalogue!: Catalogue;\n  isForce(): this is Force {\n    return true;\n  }\n  isEntry(): this is Entry {\n    return true;\n  }\n  isIdUnique() {\n    return true;\n  }\n\n  *infoLinksIterator(): Iterable<InfoLink> {\n    if (this.isForce()) {\n      const cat = this.main_catalogue;\n      for (const imported of cat.imports) {\n        yield* imported.infoLinksIterator();\n      }\n      yield* cat.infoLinksIterator();\n    }\n    yield* super.infoLinksIterator();\n  }\n\n  *infoRulesIterator(): Iterable<Rule> {\n    if (this.isForce()) {\n      const cat = this.main_catalogue;\n      for (const imported of cat.imports) {\n        yield* imported.infoRulesIterator();\n      }\n      yield* cat.infoRulesIterator();\n    }\n    yield* super.infoRulesIterator();\n  }\n\n  *selectionsIterator(): Iterable<Base> {\n    yield* this.categories;\n    if (this.forces) yield* this.forces;\n  }\n  *rulesIterator(): Iterable<Rule> {\n    for (const group of getAllInfoGroups(this)) {\n      if (group.rules) {\n        yield* group.rules;\n      }\n      if (group.infoLinks) {\n        yield* group.infoLinks?.filter((o) => o.type === \"rule\").map((o) => o.target as Rule);\n      }\n    }\n    if (this.main_catalogue) yield* this.main_catalogue.rulesIterator();\n  }\n  generateForces(categories: Record<string, Category>): Force[] {\n    const result = [];\n    for (const force of this.forceEntries || []) {\n      const copied = clone(force);\n      copied.main_catalogue = this.main_catalogue;\n      const forceCategories = [];\n      for (const link of force.categoryLinks || []) {\n        if (link.targetId in categories) {\n          forceCategories.push(categories[link.targetId]);\n        }\n      }\n      copied.categories = forceCategories;\n      this.main_catalogue.index[copied.id] = copied;\n      result.push(copied);\n    }\n    this.forces = result;\n    return result;\n  }\n  isEmpty(): boolean {\n    for (const category of this.categories) {\n      if (!category.isEmpty()) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  *forcesIterator(): Iterable<Force> {\n    if (this.forceEntries) {\n      yield* this.forceEntries;\n    }\n  }\n\n  *forcesIteratorRecursive(): Iterable<Force> {\n    if (this.forces) {\n      for (const force of this.forces) {\n        yield force;\n        yield* force.forcesIteratorRecursive();\n      }\n    }\n  }\n}\n\nconst maxValue = Infinity;\nexport function getTheoreticalMaxes(\n  constraints: Iterable<BSIConstraint>,\n  modifierGroups: Iterable<BSIModifierGroup>\n): number[] {\n  const maxConstraints = [] as number[];\n  function push(n: number) {\n    maxConstraints.push(n);\n  }\n  for (const constraint of constraints) {\n    const beginLength = maxConstraints.length;\n    if (constraint.field !== \"selections\" || constraint.type !== \"max\") continue;\n    if (constraint.value > 1) {\n      push(constraint.value);\n      continue;\n    }\n    let constraintValue = constraint.value;\n    for (const modifier_group of iterateModifierGroupsRecursive(modifierGroups)) {\n      for (const modifier of modifier_group.modifiers || []) {\n        if (modifier.field !== constraint.id) continue;\n        if (modifier.type === \"increment\") {\n          if (modifier_group.repeats?.length || modifier.repeats?.length) {\n            push(maxValue);\n            continue;\n          }\n          constraintValue += modifier.value as number;\n          if (constraintValue > 1) {\n            push(constraintValue);\n            continue;\n          }\n        }\n        if (modifier.type === \"decrement\" && (modifier.value as any) < 0) {\n          if (modifier_group.repeats?.length || modifier.repeats?.length) {\n            push(maxValue);\n            continue;\n          }\n          constraintValue -= modifier.value as number;\n          if (constraintValue > 1) {\n            push(constraintValue);\n            continue;\n          }\n        }\n        if (modifier.type === \"set\" && (modifier.value as any) > 1) {\n          if (modifier.value === -1) {\n            push(maxValue);\n            continue;\n          }\n          push(modifier.value as number);\n        }\n      }\n    }\n\n    if (beginLength === maxConstraints.length) push(constraintValue);\n  }\n\n  return maxConstraints;\n}\n\nexport interface BSIExtraConstraint extends BSIConstraint, BSINamed {\n  parent: Base;\n  modifiers: BSIModifier[];\n  modifierGroups: BSIModifierGroup[];\n}\n\nexport class ProfileType extends Base implements BSIProfileType {\n  declare characteristicTypes: BSICharacteristicType[];\n  declare attributeTypes: BSIAttributeType[];\n  declare sortIndex?: number;\n}\n// const debugKeys = new Set();\nexport class Profile extends Base implements BSIProfile {\n  declare characteristics: BSICharacteristic[];\n  declare attributes: BSIAttribute[];\n  declare typeId: string;\n  declare typeName: string;\n  declare publication?: BSIPublication | undefined;\n  isProfile(): this is Profile {\n    return true;\n  }\n  getTypeName() {\n    return this.typeName;\n  }\n  getTypeId() {\n    return this.typeId;\n  }\n  isIdUnique() {\n    return true;\n  }\n}\nexport class Characteristic extends Base implements BSICharacteristic {\n  declare typeId: string;\n  declare $text: string | number;\n  originalValue?: string | number | boolean | undefined;\n  getLabel() {\n    if (this.catalogue) {\n      return this.catalogue.findOptionById(this.typeId)?.getName() ?? this.typeId;\n    }\n    return this.typeId;\n  }\n  getTypeName() {\n    return this.getLabel();\n  }\n  getName() {\n    return `${this.getLabel()} = ${this.$text}`;\n  }\n}\n\nexport class InfoGroup extends Base {\n  declare characteristics: BSICharacteristic[];\n  declare typeId: string;\n  declare typeName: string;\n  declare publication?: BSIPublication | undefined;\n  isInfoGroup(): this is InfoGroup {\n    return true;\n  }\n  isIdUnique() {\n    return true;\n  }\n}\n\nexport const basicQueryFields = new Set([\n  \"any\",\n  \"model\",\n  \"unit\",\n  \"upgrade\",\n  \"mount\",\n  \"crew\",\n  \"entry\",\n  \"roster\",\n  \"group\",\n  \"force\",\n  \"category\",\n]);\nexport class Condition extends Base {\n  declare childId: string;\n  declare scope: string;\n  declare type: string;\n  declare includeChildSelections: boolean;\n  declare includeChildForces: boolean;\n  declare percentValue?: boolean;\n}\nexport class Constraint extends Condition {\n  declare type: \"min\" | \"max\" | \"exactly\";\n}\nexport class Modifier extends Base implements BSIModifier {\n  declare type: BSIModifierType;\n  declare field: \"category\" | \"name\" | \"hidden\" | string; //costId\n  declare value: number | string | boolean;\n  declare affects?: string;\n  declare scope?: string;\n  declare join?: string;\n  declare arg?: string;\n}\nexport class ModifierGroup extends Base implements BSIModifierGroup { }\nexport class ConditionGroup extends Base {\n  declare type: \"or\" | \"and\";\n}\n\nexport class LocalConditionGroup extends Base implements BSILocalConditionGroup {\n  declare type: \"atLeast\" | \"greaterThan\" | \"atMost\" | \"lessThan\" | \"equalTo\" | \"notEqualTo\";\n  declare scope: string;\n  declare field: string;\n  declare childId?: string | undefined;\n  declare includeChildSelections?: boolean | undefined;\n  declare includeChildForces?: boolean | undefined;\n  declare percentValue?: boolean | undefined;\n\n  declare repeats: number;\n  declare value: number;\n  declare roundUp?: boolean | undefined;\n}\n\nexport class Rule extends Base implements BSIRule {\n  declare id: string;\n  declare name: string;\n  declare description: string;\n  declare hidden: boolean;\n  declare page?: string;\n  declare modifiers?: BSIModifier[] | undefined;\n  declare modifierGroups?: BSIModifierGroup[] | undefined;\n  getDescription(): string {\n    return Array.isArray(this.description) ? this.description.join(\"\\n\") : this.description || \"\";\n  }\n  isRule(): this is Rule {\n    return true;\n  }\n  isIdUnique() {\n    return true;\n  }\n}\n\nexport function getStaticFilters(source: Base): string[] {\n  const ids = [\"any\", source.id];\n  if (source.isLink()) ids.push(source.targetId);\n\n  if (source.isForce()) ids.push(\"force\");\n  //@ts-ignore\n  else if (source.isEntry()) ids.push(\"entry\");\n  //@ts-ignore\n  else if (source.isGroup()) ids.push(\"group\");\n  //@ts-ignore\n  else if (source.isCategory()) ids.push(\"category\");\n  //@ts-ignore\n  else if (source.isRoster()) ids.push(\"roster\");\n\n  const type = source.getType();\n  if (type) ids.push(type);\n  return ids;\n}\n\nexport function getIds(source: Base): string[] {\n  return source.isLink() ? [source.id, source.targetId] : [source.id];\n}\nexport function* getAllInfoGroups(group: Base): Iterable<InfoGroup> {\n  yield group as InfoGroup;\n  for (const grp of group.infoGroups || []) {\n    yield* getAllInfoGroups(grp);\n  }\n  for (const link of group.infoLinks || []) {\n    if (link.type === \"infoGroup\") yield* getAllInfoGroups(link.target as InfoGroup);\n  }\n}\nexport function* iterateModifierGroupsRecursive(\n  groups?: Iterable<BSIModifierGroup>\n): Generator<BSIModifierGroup, void, undefined> {\n  if (groups) {\n    for (const group of groups) {\n      yield group;\n      yield* iterateModifierGroupsRecursive(group.modifierGroups);\n    }\n  }\n}\n\nexport const goodJsonKeys = new Set([\n  ...arrayKeys,\n  \"defaultAmount\",\n  \"id\",\n  \"import\",\n  \"importRootEntries\",\n  \"name\",\n  \"hidden\",\n  \"field\",\n  \"scope\",\n  \"value\",\n  \"percentValue\",\n  \"shared\",\n  \"includeChildSelections\",\n  \"includeChildForces\",\n  \"childId\",\n  \"type\",\n  \"targetId\",\n  \"primary\",\n  \"typeId\",\n  \"collective\",\n  \"$text\",\n  \"page\",\n  \"typeName\",\n  \"defaultSelectionEntryId\",\n  \"revision\",\n  \"battleScribeVersion\",\n  \"authorName\",\n  \"authorContact\",\n  \"authorUrl\",\n  \"library\",\n  \"gameSystemId\",\n  \"gameSystemRevision\",\n  \"xmlns\",\n  \"readme\",\n  \"description\",\n  \"comment\",\n  \"publicationDate\",\n  \"publisher\",\n  \"publisherId\",\n  \"publisherUrl\",\n  \"shortName\",\n  \"repeats\",\n  \"roundUp\",\n  \"defaultCostLimit\",\n  \"publicationId\",\n\n  //queries\n  \"affects\",\n\n  // associations\n  \"label\",\n  \"labelMembers\",\n  \"maxAssociationsPerMember\",\n  \"ids\",\n  \"min\",\n  \"max\",\n  \"of\",\n  \"info\",\n\n  // groups\n  \"flatten\",\n  \"collapsible\",\n\n  // entries\n  \"sortIndex\",\n  \"subType\",\n\n  \"arg\", // (replace modifier)\n  \"position\", // (replace, increment, decrement, multiply, ... modifiers)\n  \"join\", // (apprend/prepend modifier)\n  \"automatic\", // (constraints)\n  \"negative\", // (constraints)\n  \"message\", // (constraints)\n  \"childForcesLabel\",\n  \"affects\",\n\n  // refs\n  \"alias\",\n  \"noindex\",\n\n  //Legacy\n  \"costTypeId\",\n  \"profileTypeId\",\n  \"characteristicTypeId\",\n]);\nexport function rootToJson(data: Catalogue | BSICatalogue | Record<string, any>, fixRoot = false): string {\n  const root: any = {\n    catalogue: undefined,\n    gameSystem: undefined,\n  };\n  const copy = { ...data }; // ensure there is no recursivity by making sure only this copy is put in the json\n  if (!data.gameSystemId) {\n    root.gameSystem = copy;\n    root.gameSystem.type = \"gameSystem\";\n    delete root.catalogue;\n  } else {\n    root.catalogue = copy;\n    root.catalogue.type = \"catalogue\";\n    delete root.gameSystem;\n  }\n\n  const obj = fixRoot ? getDataObject(root) : root;\n  const stringed = JSON.stringify(obj, (k, v) => {\n    if (Array.isArray(v) && v.length === 0) return undefined;\n    if (v === copy || goodJsonKeys.has(k) || isFinite(Number(k))) {\n      if (isObject(v)) {\n        return splitExactlyConstraints(splitExactlyConstraintsModifiers(v));\n      }\n      return v;\n    }\n    return undefined;\n  });\n  return stringed;\n}\nexport function entryToJson(data: Base | Record<string, any>, extraFields?: Set<string>): string {\n  const stringed = JSON.stringify(data, function (k, v) {\n    if (Array.isArray(v) && v.length === 0) return undefined;\n    if (goodJsonKeys.has(k) || isFinite(Number(k)) || extraFields?.has(k)) return v;\n    return undefined;\n  });\n  return stringed;\n}\n\ninterface EntriesToJsonOptions {\n  formatted?: boolean;\n  forceArray?: boolean; // default is true\n}\nexport function entriesToJson(\n  data: Array<Base | Record<string, any>> | Base | Record<string, any>,\n  extraFields?: Set<string>,\n  options?: EntriesToJsonOptions\n): string {\n  const takeOutOfArray = options?.forceArray === false;\n  data = Array.isArray(data) && data?.length === 1 && takeOutOfArray ? data[0] : data;\n  const stringed = JSON.stringify(\n    data,\n    function (k, v) {\n      if (goodJsonKeys.has(k) || isFinite(Number(k)) || extraFields?.has(k)) return v;\n      return undefined;\n    },\n    options?.formatted === true ? 2 : undefined\n  );\n  return stringed;\n}\n\nexport function forEachObjectWhitelist2<T extends Base>(\n  current: Base,\n  callbackfn: (value: T, parent: T) => unknown,\n  whiteList = arrayKeys\n) {\n  for (const key in current) {\n    if (whiteList.has(key)) {\n      const value = current[key as keyof typeof current];\n      if (Array.isArray(value)) {\n        if (value.length && isObject(value[0])) {\n          for (let i = 0; i < value.length; i++) {\n            const cur = value[i] as T;\n            callbackfn(cur, current as T);\n            forEachObjectWhitelist2(cur, callbackfn, whiteList);\n          }\n        }\n      }\n    }\n  }\n}\n\nexport function convertRuleToProfile(rule: BSIRule): BSIProfile {\n  return {\n    characteristics: [\n      {\n        name: \"Description\",\n        typeId: \"description\",\n        $text: Array.isArray(rule.description) ? rule.description[0] : rule.description,\n      },\n    ],\n    attributes: [],\n    id: rule.id,\n    name: rule.name,\n    hidden: rule.hidden,\n    typeId: \"rules\",\n    typeName: \"Rules\",\n  };\n}\n\nexport interface AffectsQuery {\n  self?: boolean;\n  entries?: boolean;\n  forces?: boolean;\n  recursive?: boolean;\n  filterBy?: string;\n  affectsWhat?: string;\n}\nexport function readable_affects_query(fields: AffectsQuery, idToString: (id: string) => string) {\n  const result = []\n  if (fields.self && (fields.entries || fields.forces)) result.push(\"self\");\n  if (fields.entries) result.push(\"entries\");\n  if (fields.forces) result.push(\"forces\");\n  if (fields.recursive) result.push(\"recursive\");\n  if (fields.filterBy && fields.filterBy !== \"any\") result.push(idToString(fields.filterBy));\n  if (fields.affectsWhat && fields.affectsWhat !== \"entries\") result.push(idToString(fields.affectsWhat));\n  const combined = result.join(\".\");\n  return combined;\n\n}\nexport function construct_affects_query(fields: AffectsQuery) {\n  const result = [];\n  if (fields.self && (fields.entries || fields.forces)) result.push(\"self\");\n  if (fields.entries) result.push(\"entries\");\n  if (fields.forces) result.push(\"forces\");\n  if (fields.recursive) result.push(\"recursive\");\n  if (fields.filterBy && fields.filterBy !== \"any\") result.push(fields.filterBy);\n  if (fields.affectsWhat && fields.affectsWhat !== \"entries\") result.push(fields.affectsWhat);\n  const combined = result.join(\".\");\n  return combined;\n}\nexport function deconstruct_affects_query(query?: string): AffectsQuery {\n  const selectors = [\"profiles\", \"constraints\", \"costs\", \"rules\", \"categories\"];\n  const filterBy = [];\n  const flags = {\n    self: false,\n    entries: false,\n    forces: false,\n    recursive: false,\n  } as Record<string, boolean>;\n\n  const split = (query || \"\").split(\".\");\n  let affectsWhat = \"entries\";\n\n  for (let i = 0; i < split.length; i++) {\n    const cur = split[i];\n    if (selectors.includes(cur)) {\n      affectsWhat = split.slice(i).join(\".\");\n      break;\n    }\n    if (cur in flags) {\n      flags[cur] = true;\n      continue;\n    }\n    filterBy.push(cur);\n  }\n\n  if (!flags.entries && !flags.forces) {\n    flags.self = true;\n  }\n\n  return {\n    ...flags,\n    filterBy: filterBy.length ? filterBy.join(\".\") : \"any\",\n    affectsWhat,\n  };\n}\n"],"names":["entries","isNonEmptyIfHasOneOf","arrayKeys","getDataObject","data","Base","json","entryToJson","categoryLink","stack","current","key","group","getAllInfoGroups","o","iterateModifierGroupsRecursive","callbackfn","_depth","instance","blacklist","cur","target","whiteList","maxDepth","next","depth","value","isObject","i","cb","s","includeTargets","res","first","UNCATEGORIZED_ID","constraint","result","useTarget","CategoryLink","modifier","sub_grp","skipGroup","child","maxes","getTheoreticalMaxes","name","found","Entry","Group","Link","d","cost","InfoLink","ILLEGAL_ID","Category","Force","cat","imported","categories","force","copied","clone","forceCategories","link","category","maxValue","constraints","modifierGroups","maxConstraints","push","n","beginLength","constraintValue","modifier_group","ProfileType","Profile","Characteristic","InfoGroup","basicQueryFields","Condition","Constraint","Modifier","ModifierGroup","ConditionGroup","Rule","grp","groups","goodJsonKeys","extraFields","k","v","forEachObjectWhitelist2","readable_affects_query","fields","idToString","deconstruct_affects_query","query","selectors","filterBy","flags","split","affectsWhat"],"mappings":"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"}